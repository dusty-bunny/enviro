#!/bin/bash

trap indent RETURN

STEP="   "
INDENT=""

echo_err()
{
        local OP=

        OP=""
        [ $# -gt 1 ] && OP="$1" && shift
        echo $OP -e "${INDENT}$@" >&2
}

#
# Since this runs on every function exit an exit
# from routines who do not call Func() would end
# up decrementing INDENT without a paired increment.
#
indent()
{
        [ "${FUNCNAME[1]}" = "echo_err" ] && return 0
#       [ "${FUNCNAME[1]}" = "dbg"      ] && return 0
        [ "${FUNCNAME[1]}" = "indent"      ] && return 0

        dbg && echo_err "-n" "${INDENT}Indent @ ${#INDENT}:$INDENT: "
        [ "$1" = "+" ] && echo -n ":" >&2 && echo -n "+" >&2 && INDENT="${STEP}${INDENT}"
        [ "$1" = ""  ] && echo -n ";" >&2 && INDENT="-${INDENT%%      } "
        dbg && echo_err "now @ ${#INDENT}:$INDENT:"
}

#
#
#
function dbg
{
        [ "$DEBUG" = "1" ] || return 1
        return 0
}

#
# Show what functions is executing
# and what args were passed. By the
# way, don't increment INDENT for
# ourselves.
#
function Func
{
        [ "${FUNCNAME[1]}" = "Func"      ] && return 0
        [ "${FUNCNAME[1]}" = "echo_err" ] && return 0
        indent "+"
        echo_err "===> ${FUNCNAME[1]}() $@"
}

#
# Does not exist for python3
#
HTTPSERVER="SimpleHTTPServer  8080"
#
# This is the only python module that works readily
#
HTTPSERVER="littlehttpserver -p 8080"


#
#
#
make_docs()
{
        Func $@

        make clean && make docs && (cd _build/html && python3 -m $HTTPSERVER )
}

#
# Preview changes:
#
preview()
{
        Func $@
        cd docs
        make clean && make preview && (cd _build/html && python3 -m $HTTPSERVER )
}

#
# Install Sphinx toolchain:
#
sphinx_tools_install()
{
        Func $@
        sudo apt-get install  python3-breathe python3-recommonmark
}

#
# List possible args.
#
list_funcs()
{
        Func $@
        declare -a LIST

        indent "+"
        LIST=( $(grep "()$" $0 | sed -e 's/^/        /') )
        for i in $(seq 0 $(( ${#LIST[@]} - 1)) ); do
                 echo_err "${LIST[$i]}"
        done
        indent "-"

}

#
#
#
help()
{
    Func $@
    list_funcs
}

#
#
#
function parse
{
    Func $@

    [ $# -eq 0 ] && ARG="-h"
    while [ $# -ne 0 ] ; do
        ARG=$1
        case "$ARG" in
        -h)     help
                echo     "${INDENT}================================" >&2
                exit
                ;;
         list) list_funcs ; exit
                ;;
        *)
                ;;
        esac
        shift
    done

}

[ -n "$1" ] && parse "$@"
$@


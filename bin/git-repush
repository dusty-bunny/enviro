#!/bin/bash


debug()
{
        [ "$DEBUG" = "1" ] && return
        return 1
}

echo_dbg()
{
        debug || return
        echo -e "$*" >&2
}

help()
{
        echo -e "$(basename "$0"):"
        sed -n -e '/^# ARGS_Begin/,/^# ARGS_End/p' "$0" | grep -v "^#" | grep ")"
        echo -e ""
}

argue()
{
# ARGS_Begin
	while [ $# -ne 0 ] ; do
	        case $1 in
	        -A) NEW_TIME_STAMP=$(date +"%a %b %d %T %Y %z")
	            echo_dbg "NEW_TIME_STAMP:  ($NEW_TIME_STAMP)"
	            DO_COMMIT=( "git" "commit" "--amend" "--date=${NEW_TIME_STAMP}" "--no-verify" )
	            myname="$(git config --get user.name)"
	            author=$(git log -1 --pretty=short | awk '/^Author:/ {print $2 " " $3}' )
	            if [ "$myname" != "$author" ] ; then
	                echo_dbg "Updating Author."
	                DO_COMMIT=( "${DO_COMMIT[@]}" "--reset-author" )
	                sleep 2
	            fi
	           ;;
	        -a) NEW_TIME_STAMP=$(date +"%a %b %d %T %Y %z")
	            echo "NEW_TIME_STAMP:  ($NEW_TIME_STAMP)"
	            DO_COMMIT=( "git" "commit" "--amend" "--date=${NEW_TIME_STAMP}" )
	            myname="$(git config --get user.name)"
	            author=$(git log -1 --pretty=short | awk '/^Author:/ {print $2 " " $3}' )
	            if [ "$myname" != "$author" ] ; then
	                echo "Updating Author."
	                DO_COMMIT=( "${DO_COMMIT[@]}" "--reset-author" )
	                sleep 2
	            fi
	           ;;
	        -c) DO_COMMIT=( "git" "commit" )
	           ;;
	        -d) DEBUG=1; echo "DEBUG = $DEBUG"
	           ;;
	        -h) help; exit 0
	           ;;
	        -p|--push) DO_COMMIT=( "eval" "git" "commit" "&&" "git" "$PUSH" )
	           ;;
	        -r) PUSH="review -D"
	            DO_COMMIT=( "eval" "git" "commit" "&&" "git" "$PUSH" )
	           ;;
	        *) echo "Unknown argument: $1"; help; exit 0
	           ;;
	        esac
	        shift
	done
# ARGS_End"
}

echo "=== $(pwd)"

if ! argue "$@" ; then
        echo "Bad argument:" >&2
        exit 2
fi

(
        Dir="$(git rev-parse --show-toplevel)" || exit 1
        pwd
        echo_dbg "cd to $Dir"
        cd "$Dir" || exit 1
        [  "${#DO_COMMIT[@]}" -ne 0 ] && echo "${DO_COMMIT[@]}"
        "${DO_COMMIT[@]}"
        [  "${#DO_COMMIT[@]}" -eq 0 ] && git status
)


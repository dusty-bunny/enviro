#!/bin/bash

SECONDS=0

common_error_codes=( "Success."
                      "Debug is not turned on."
                      "Agent failed to launch."
                      "No key matching that name was found."
                      "No key attrib returned."
                      "Insufficent number of arguments."
                      "No fingerprint for this key found."
                      "No grip found."
                      "Unable to acquire fingerprint of key."
                      ""
                      ""
                    )

#
# Statement print for echoing info
# needed to debug the script.
#
dbg_echo()
{
        local String=
        local Spacing=

        Spacing=$(echo $Indent | sed -e 's/=/ /g')
        [ "$DEBUG" != DEBUG ] && return 1
        String="$@"
        echo "                  ${Spacing}${String}" >&2
        return 0
}

#
# Call tracing when debugging.
#
Caller()
{
        Indent="$Indent===="
        [ "$DEBUG" != DEBUG ] && return 0
        echo "[$SECONDS]       ${#FUNCNAME[@]} : ${Indent}> ${FUNCNAME[1]}:: $@"
        return 0
}

#
# A way to print out error messages along
# with returbn the error code back to the
# return which will correctly return back
# to the caller with the intended error code.
#
Return()
{
        local err=

        err="$1"; shift
        [ "$err" -eq 0 ] && [ "$DEBUG" != DEBUG ] && return 0
        echo "${common_error_codes[$err]}"
        return $err
}

set_array()
{
        local AName=
        local BName=

        AName="$1"; shift
        BName="$1"; shift

        declare -p ${AName} | eval sed -e 's/${AName}/${BName}/'
#       declare -p Lines | sed -e 's/Lines/Key_tmp/'
}

get_key_entries()
{
        Caller $@
        local Key_name=
        local Key_tmp=
        local Key_var=
        local idx=
        local Tmp=
        declare -a Lines=()

        idx=0
        Key_name=$1; shift
        Key_var=$1;  shift
        gpg --list-secret-keys --with-colons | while read line ; do
              Tmp=${line%%:*}
              if [ "$Tmp" != "sec" ] && [ "$In_process" != "true" ] ; then
                        Lines=()
                        continue
                fi
              In_process="true"
              dbg_echo "Lines[$idx]=$line"
              Lines[$idx]="$line"
              idx=$(( idx += 1 ))
              if [ "$Tmp" == "uid" ] ; then
                if [ "$(echo $line | awk -F':' '/^uid/ {print $10}')" \
                        != "$Key_name" ] ; then
                        In_process="false"
                        Lines=()
                        continue
                fi

                eval $(set_array Lines Key_tmp)
                dbg_echo "Key_tmp ${#Key_tmp[@]}"

                return 0
#               return $(Return 0)
              fi
              done

#       return $(Return 3)
}

#
# Pick one of the attributes of the key
# and store it in a var passed in.
#
# arg1:   Key name    Name of the key to use (the uid: line)
# arg2:   Key attrib  Which line of a "gpg -K --with-colons" to grab.
# arg3:   KEY_VAR     The return value.
#
get_key_attribute()
{
        Caller $@
        local Key_attr=
        local Key_tmp=
        local Key_var=
        local Key_name=
        declare -a Sed_opts=()

        Key_name=$1;   shift
        dbg_echo "Key_name $Key_name"
        Key_attrib=$1; shift
        dbg_echo "Key_attrib $Key_attrib"
        Key_var=$1;   shift
        dbg_echo "Key variable to return is $Key_var"

        Sed_opts=( "-e" "s/$Key_var:]//g"  )
        if ! $(get_key_entries $Key_name $Key_var) ; then
                return $(Return 4)
        fi
        dbg_echo "Key_var $Key_var ${!Key_var}"
        return $(Return 0)
}

get_fpr_attrib()
{
        Caller $@
        local Key_val=
        local Key_tmp=
        local Key_attrib=
        local Key_name=

        [ $# -ne 2 ] && return $(Return 5)

        Key_name="$1"; shift
        Key_val="$1"; shift
        Key_attrib=fpr

        if ! get_key_attribute $Key_name fpr Key_tmp ; then
#        Key_fp=$(get_key_entries $Key_name | grep ^fpr \
#                 | head -1 | sed -e 's/[fpr:]//g')
                return $(Return $?)
        fi
        dbg_echo "Found secret key $Key_fp" >&2
        exec ${Key_val}=${Key_tmp}

        return $(Return 0)
}

get_grp_attrib()
{
        Caller $@
        return $(Return 7)
}

launch_agent()
{
        Caller $@
        AGENT_OPTS=( "-vvv" "--debug-level guru" "--allow-preset-passphrase" \
                     "--daemon" )
        #
        # Make sure any running agents are shutdown.
        #
        # gpgconf kill gpg-agent
        CMD="gpg-agent ${AGENT_OPTS[@]}"
        echo "CMD <$CMD>"
        [ "$1" == "DEBUG" ] && return

        if ! $CMD ; then
                echo "Yikes!  Agent failed to start.<$?>" >&2
                return $(Return 2)
        fi

        return $(Return 0)
}

preset_passphrase()
{
        Caller $@
        local Key_fp=
        local Key_name=
        local err=

        Key_fp="$1"  ; shift
        Key_name="$1"; shift

        echo "Enter the passphrase for the secret key to insert \
              into the agent's cache."
        get_fingerprint Key_fp $Key_name;
        CMD="/usr/lib/gnupg2/gpg-preset-passphrase --preset $Key_fp"
        echo "CMD <$CMD>"
        [ "$1" == "DEBUG" ] && return $(Return 0)
       $CMD
        err=$?
        return $(Return $err)
}

if ! get_fpr_attrib billy HOLD ; then
        rc=8

        exit $(Return $rc)
fi
dbg_echo "the fpr attrib returned $HOLD"
exit $(Return 0)


#!/bin/bash

err_codes_to_text=(
        SUCCESS
        EPERM
        ENOENT
        ESRCH
        EINTR
        EIO
        ENXIO
        E2BIG
        ENOEXEC
        EBADF
        ECHILD
        EAGAIN
        ENOMEM
        EACCES
        EFAULT
        ENOTBLK
        EBUSY
        EEXIST
        EXDEV
        ENODEV
        ENOTDIR
        EISDIR
        EINVAL
        ENFILE
        EMFILE
        ENOTTY
        ETXTBSY
        EFBIG
        ENOSPC
        ESPIPE
        EROFS
        EMLINK
        EPIPE
        EDOM
        ERANGE
        EDEADLK
        ENAMETOOLONG
        ENOLCK
        ENOSYS
        ENOTEMPTY
        ELOOP
        EWOULDBLOCK
        ENOMSG
        EIDRM
        ECHRNG
        EL2NSYNC
        EL3HLT
        EL3RST
        ELNRNG
        EUNATCH
        ENOCSI
        EL2HLT
        EBADE
        EBADR
        EXFULL
        ENOANO
        EBADRQC
        EBADSLT
        EDEADLOCK
        EBFONT
        ENOSTR
        ENODATA
        ETIME
        ENOSR
        ENONET
        ENOPKG
        EREMOTE
        ENOLINK
        EADV
        ESRMNT
        ECOMM
        EPROTO
        EMULTIHOP
        EDOTDOT
        EBADMSG
        EOVERFLOW
        ENOTUNIQ
        EBADFD
        EREMCHG
        ELIBACC
        ELIBBAD
        ELIBSCN
        ELIBMAX
        ELIBEXEC
        EILSEQ
        ERESTART
        ESTRPIPE
        EUSERS
        ENOTSOCK
        EDESTADDRREQ
        EMSGSIZE
        EPROTOTYPE
        ENOPROTOOPT
        EPROTONOSUPPORT
        ESOCKTNOSUPPORT
        EOPNOTSUPP
        EPFNOSUPPORT
        EAFNOSUPPORT
        EADDRINUSE
        EADDRNOTAVAIL
        ENETDOWN
        ENETUNREACH
        ENETRESET
        ECONNABORTED
        ECONNRESET
        ENOBUFS
        EISCONN
        ENOTCONN
        ESHUTDOWN
        ETOOMANYREFS
        ETIMEDOUT
        ECONNREFUSED
        EHOSTDOWN
        EHOSTUNREACH
        EALREADY
        EINPROGRESS
        ESTALE
        EUCLEAN
        ENOTNAM
        ENAVAIL
        EISNAM
        EREMOTEIO
        EDQUOT
        ENOMEDIUM
        EMEDIUMTYPE
        ECANCELED
#
# The following codes are not supported in Nuttx.
#
#       ENOKEY
#       EKEYEXPIRED
#       EKEYREVOKED
#       EKEYREJECTED
#       EOWNERDEAD
#       ENOTRECOVERABLE
#       ERFKILL
#       EHWPOISON
#
)

declare -A errno
declare -A XXX

XXX["SUCCESS"]="Operation completed successfully."
XXX["EPERM"]="Operation not permitted."
XXX["ENOENT"]="No such file or directory."
XXX["ESRCH"]="No such process."
XXX["EINTR"]="Interrupted system call."
XXX["EIO"]="I/O error."
XXX["ENXIO"]="No such device or address."
XXX["E2BIG"]="Argument list too long."
XXX["ENOEXEC"]="Exec format error."
XXX["EBADF"]="Bad file number."
XXX["ECHILD"]="No child processes."
XXX["EAGAIN"]="Try again."
XXX["ENOMEM"]="Out of memory."
XXX["EACCES"]="Permission denied."
XXX["EFAULT"]="Bad address."
XXX["ENOTBLK"]="Block device required."
XXX["EBUSY"]="Device or resource busy."
XXX["EEXIST"]="File exists."
XXX["EXDEV"]="Cross-device link."
XXX["ENODEV"]="No such device."
XXX["ENOTDIR"]="Not a directory."
XXX["EISDIR"]="Is a directory."
XXX["EINVAL"]="Invalid argument."
XXX["ENFILE"]="File table overflow."
XXX["EMFILE"]="Too many open files."
XXX["ENOTTY"]="Not a typewriter."
XXX["ETXTBSY"]="Text file busy."
XXX["EFBIG"]="File too large."
XXX["ENOSPC"]="No space left on device."
XXX["ESPIPE"]="Illegal seek."
XXX["EROFS"]="Read-only file system."
XXX["EMLINK"]="Too many links."
XXX["EPIPE"]="Broken pipe."
XXX["EDOM"]="Math argument out of domain of func."
XXX["ERANGE"]="Math result not representable."
XXX["EDEADLK"]="Resource deadlock would occur."
XXX["ENAMETOOLONG"]="File name too long."
XXX["ENOLCK"]="No record locks available."
XXX["ENOSYS"]="Invalid system call number."
XXX["ENOTEMPTY"]="Directory not empty."
XXX["ELOOP"]="Too many symbolic links encountered."
XXX["EWOULDBLOCK"]="EAGAIN  Operation would block."
XXX["ENOMSG"]="No message of desired type."
XXX["EIDRM"]="Identifier removed."
XXX["ECHRNG"]="Channel number out of range."
XXX["EL2NSYNC"]="Level 2 not synchronized."
XXX["EL3HLT"]="Level 3 halted."
XXX["EL3RST"]="Level 3 reset."
XXX["ELNRNG"]="Link number out of range."
XXX["EUNATCH"]="Protocol driver not attached."
XXX["ENOCSI"]="No CSI structure available."
XXX["EL2HLT"]="Level 2 halted."
XXX["EBADE"]="Invalid exchange."
XXX["EBADR"]="Invalid request descriptor."
XXX["EXFULL"]="Exchange full."
XXX["ENOANO"]="No anode."
XXX["EBADRQC"]="Invalid request code."
XXX["EBADSLT"]="Invalid slot."
XXX["EDEADLOCK"]="Resource deadlock would occur."
XXX["EBFONT"]="Bad font file format."
XXX["ENOSTR"]="Device not a stream."
XXX["ENODATA"]="No data available."
XXX["ETIME"]="Timer expired."
XXX["ENOSR"]="Out of streams resources."
XXX["ENONET"]="Machine is not on the network."
XXX["ENOPKG"]="Package not installed."
XXX["EREMOTE"]="Object is remote."
XXX["ENOLINK"]="Link has been severed."
XXX["EADV"]="Advertise error."
XXX["ESRMNT"]="Srmount error."
XXX["ECOMM"]="Communication error on send."
XXX["EPROTO"]="Protocol error."
XXX["EMULTIHOP"]="Multihop attempted."
XXX["EDOTDOT"]="RFS specific error."
XXX["EBADMSG"]="Not a data message."
XXX["EOVERFLOW"]="Value too large for defined data type."
XXX["ENOTUNIQ"]="Name not unique on network."
XXX["EBADFD"]="File descriptor in bad state."
XXX["EREMCHG"]="Remote address changed."
XXX["ELIBACC"]="Can not access a needed shared library."
XXX["ELIBBAD"]="Accessing a corrupted shared library."
XXX["ELIBSCN"]=".lib section in a.out corrupted."
XXX["ELIBMAX"]="Attempting to link in too many shared libraries."
XXX["ELIBEXEC"]="Cannot exec a shared library directly."
XXX["EILSEQ"]="Illegal byte sequence."
XXX["ERESTART"]="Interrupted system call should be restarted."
XXX["ESTRPIPE"]="Streams pipe error."
XXX["EUSERS"]="Too many users."
XXX["ENOTSOCK"]="Socket operation on non-socket."
XXX["EDESTADDRREQ"]="Destination address required."
XXX["EMSGSIZE"]="Message too long."
XXX["EPROTOTYPE"]="Protocol wrong type for socket."
XXX["ENOPROTOOPT"]="Protocol not available."
XXX["EPROTONOSUPPORT"]="Protocol not supported."
XXX["ESOCKTNOSUPPORT"]="Socket type not supported."
XXX["EOPNOTSUPP"]="Operation not supported on transport endpoint."
XXX["EPFNOSUPPORT"]="Protocol family not supported."
XXX["EAFNOSUPPORT"]="Address family not supported by protocol."
XXX["EADDRINUSE"]="Address already in use."
XXX["EADDRNOTAVAIL"]="Cannot assign requested address."
XXX["ENETDOWN"]="Network is down."
XXX["ENETUNREACH"]="Network is unreachable."
XXX["ENETRESET"]="Network dropped connection because of reset."
XXX["ECONNABORTED"]="Software caused connection abort."
XXX["ECONNRESET"]="Connection reset by peer."
XXX["ENOBUFS"]="No buffer space available."
XXX["EISCONN"]="Transport endpoint is already connected."
XXX["ENOTCONN"]="Transport endpoint is not connected."
XXX["ESHUTDOWN"]="Cannot send after transport endpoint shutdown."
XXX["ETOOMANYREFS"]="Too many references: cannot splice."
XXX["ETIMEDOUT"]="Connection timed out."
XXX["ECONNREFUSED"]="Connection refused."
XXX["EHOSTDOWN"]="Host is down."
XXX["EHOSTUNREACH"]="No route to host."
XXX["EALREADY"]="Operation already in progress."
XXX["EINPROGRESS"]="Operation now in progress."
XXX["ESTALE"]="Stale file handle."
XXX["EUCLEAN"]="Structure needs cleaning."
XXX["ENOTNAM"]="Not a XENIX named type file."
XXX["ENAVAIL"]="No XENIX semaphores available."
XXX["EISNAM"]="Is a named type file."
XXX["EREMOTEIO"]="Remote I/O error."
XXX["EDQUOT"]="Quota exceeded."
XXX["ENOMEDIUM"]="No medium found."
XXX["EMEDIUMTYPE"]="Wrong medium type."
XXX["ECANCELED"]="Operation Canceled."
#
# The following are not supported in Nuttx
#
# XXX["ENOKEY"]="Required key not available."
# XXX["EKEYEXPIRED"]="Key has expired."
# XXX["EKEYREVOKED"]="Key has been revoked."
# XXX["EKEYREJECTED"]="Key was rejected by service."
# XXX["EOWNERDEAD"]="Owner died" #"for robust mutexes."
# XXX["ENOTRECOVERABLE"]="State not recoverable."
# XXX["ERFKILL"]="Operation not possible due to RF-kill."
# XXX["EHWPOISON"]="Memory page has hardware error."
#


#
# Returns true if TRACE=1.  I.E. "trace && set -x" will set the '-x'
# shell option forcing the script to run in tracing mode.
#
trace()
{
        [ "$TRACE" = "1" ] && return 0
        return  1
}

#
# Provide an in-line check for debug status to conditionally enable calls.
# e.g. debug && echo "This is a test" will only fire if DEBUG=1 otherwise
#      it is a no-op.
#
#
debug()
{
        [ "$DEBUG" = "1" ] && return 0
        return 1
}

#
# Wrap 'echo' to cleanly redirect all output to stderr.
#
echo_err()
{
        local Bin=

        Bin=echo
        CMD="$Bin -e $@"
        $CMD >&2
}

#
# Print the name of the function and how deeply nested.
#
Func()
{
        debug  && echo_err "${#FUNCNAME[@]} : ${FUNCNAME[1]}( $@ )"
}

#
# Shortcut to send output to stderr by default.
#
echo_dbg()
{
        debug || return
        echo_err "$@"
}

setup_error_codes()
{
        Func $@
        local NumEntries=

        NumEntries=$(( "${#err_codes_to_text[@]}" - 1 ))
        echo_dbg "NumEntries is <$NumEntries>"
        for i in $(seq 0 $NumEntries) ; do
                name="${err_codes_to_text[$i]}"
                errno["$name"]=$i
        done
}

print_error_codes()
{
        Func $@
        for key in "${!errno[@]}" ; do
                echo_err -n "$key\t\t"
                [ "${#errno[$key]}" -lt 7 ] && echo_err -n "\t:: "
                echo_err "$key: ${errno[$key]}\t\t${XXX[$key]}"
        done
}

print_name_to_code()
{
        Func $@
        local err="$1"

        [ -z "$err" ] && echo_err "No error specified." && return 1
        echo_err "$err:  ${errno[$err]}\t:: ${XXX[$err]}"
}

print_code_to_name()
{
        Func $@
        local err="$1"
        local name=

        [ -z "$err" ] && echo_err "No error specified." && return 1
        name="${err_codes_to_text[$err]}"
        echo_err "$err:  $name\t:: ${XXX[$name]}"
}

list_err_map()
{
        Func $@
        local NumEntries=

        NumEntries=$(( "${#err_codes_to_text[@]}" - 1 ))
        echo_dbg "NumEntries is <$NumEntries>"
        for i in $(seq 0 $NumEntries) ; do
                key=${err_codes_to_text[$i]}
                val=$i
                echo_err -n "  $key\t"
                [ "${#key}" -lt 8 ] && echo -n -e "\t"
                echo_err "$val\t${XXX[$key]}"
        done
}

help_errno()
{
        Func $@
        echo -e "\tGiven a number less than 33 or an E code output the other."
        echo -e "\te.g.  'errno 21' ==> 'EINVAL'"
        echo -e "\te.g.  'errno EIO' ==> '4'"
        echo ""
        sed -n -e '/^### Begin/,/^### End/p' $0 | grep ')'
}
## === End of errno functions ###

[ -z "$1" ] &&  help_$(basename ${0%.sh}) && exit 1
setup_error_codes

### Begin help
while [ $# -gt 0 ] ; do
        case $1 in
        -h) help_$(basename ${0%.sh}) && exit 0
        ;;
        -l) list_err_map && exit
        ;;
        *) ARG="${1^^}"
        ;;
        esac
        shift
done
### End help

if [ -z "$(echo "$ARG" | tr -d [:digit:])" ] ; then
        print_code_to_name "$ARG"
elif [ -z "$(echo $ARG | tr -d [:alpha:])" ] ; then
        print_name_to_code "$ARG"
else
        echo_err "The argument passed in contained numbers and letters."
        echo_err "Don't do that!  Only numbers or only letters please!"
        exit 1
fi


#!/bin/bash

#
# This script will run make from the configs/nrf52832_dk
# directory against every example directory contiaining
# the file defconfig.
#
# Standard practice is to peform a distclean,
# <example app> > out.<example>, and to cycle
# through each of the possible examples.
#

CONTRAST="${CONTRAST:-0}"
COLOR="${COLOR:-1}"
DEBUG="${DEBUG:-0}"
V="${V:-0}"
Q="${Q:-@}"
# BOARDS=zeus-austin
# BOARDS="${BOARDS:-nrf52832_dk}"
ESC="\033[;"
#
# The filename key searched for when determing
# which directories in configs/$BOARDS/*/$FILE_KEY
# will server as the set of make targets.
#
FILE_KEY=defconfig
ARG_LIST=( DEBUG BOARDS FILE_KEY TARGET_DIRS NO_ERRORS Q V VERBOSE RELOCATE )
### COLORS Begin
RESET="\033[0;39;49m"
BLACK="\033[1;30m"
RED="\033[1;31m"
GREEN="\033[2;32m"
YELLOW="\033[2;33m"
BLUE="\033[1;34m"
LTBLUE="\033[2;36m"
PURPLE="\033[2;35m"
REDBLK="\033[2;31;40m"
REDYLW="\033[2;31;43m"
REDBLU="\033[2;31;46m"
GRNBLK="\033[2;32;40m"
GRNGRN="\033[2;32;42m"
YLWBLK="\033[2;33;40m"
YLWRED="\033[2;33;41m"
YLWGRN="\033[2;33;42m"
YLWBLU="\033[2;33;44m"
YLWLTBLU="\033[2;33;46m"
### COLORS End
OUT=/tmp/out
declare -A make_targets
#
# Setup targets that are not actual apps but
# are still directives to make.
#
declare -A pseudo_targets
pseudo_targets["cscope"]=1
pseudo_targets["help"]=1
pseudo_targets["config"]=1
pseudo_targets["download"]=1
# pseudo_targets["clean"]=1
# pseudo_targets["distclean"]=1
pseudo_targets["clean_cscope"]=1
pseudo_targets["clean_cruft"]=1
pseudo_targets["clean_env"]=1

#
# Create a mapping of commands to type of repo.
#
declare -A REPO_BUILD_CMDS
REPO_BUILD_CMDS["fast_api"]="build_fastapi"
REPO_BUILD_CMDS["nuttx"]="build_nuttx"

#
# Point to a function to test build results in
# different repos on a per target basisl
#
# Requires the "-T" flag.
#
declare -A REPO_BUILD_TESTS
REPO_BUILD_TESTS["fast_api"]="test_fastapi"
REPO_BUILD_TESTS["nuttx"]="test_nuttx"

#
#
#
declare -A FASTAPI_BLD_TST_CMDS
FASTAPI_BLD_TST_CMDS["zeus1"]="fastapi_zeus_bldtest"
FASTAPI_BLD_TST_CMDS["zeus2"]="fastapi_zeus_bldtest"
FASTAPI_BLD_TST_CMDS["sim"]="fastapi_sims_bldtest"
FASTAPI_BLD_TST_CMDS["simlib"]="fastapi_sims_bldtest"

#
#
#
declare -A NUTTX_BLD_TST_CMDS
NUTTX_BLD_TST_CMDS["nsh_zeus1"]="nuttx_nsh_zeus_bldtest"
NUTTX_BLD_TST_CMDS["nsh_zeus2"]="nuttx_nsh_zeus_bldtest"
NUTTX_BLD_TST_CMDS["nsh"]="nuttx_nsh_bldtest"

#
# Trap all exits.
#
on_exit()
{
        RV=$?

        [ $RV -ne 0 ] && echo_err "${RED}=============== Error exit [$RV]: ${RESET}"
        exit $RV
}

trap on_exit EXIT

#
# Returns true if TRACE=1.  I.E. "trace && set -x" will set the '-x'
# shell option forcing the script to run in tracing mode.
#
trace()
{
        [ "$TRACE" = "1" ] && return 0
        return  1
}

#
# Provide an in-line check for debug status to conditionally enable calls.
# e.g. debug && echo "This is a test" will only fire if DEBUG=1 otherwise
#      it is a no-op.
#
#
debug()
{
        [ "$DEBUG" = "1" ] && return 0
        return 1
}

#
# Shortcut to send output to stderr by default.
#
echo_dbg()
{
        debug || return
        echo_err "$@"
}


#
# Wrap echo with echo_err() and use /bin/echo instead.  This allows invoking
# this script using sh as in "sh $(basename $0)"
#
echo_err()
{
        local Bin=

        Bin="/bin/echo -e"
        $Bin "$@" >&2
}

#
# Display name of function calling this routine.
#
funcname()
{
        debug || return
        echo_err "===> ${FUNCNAME[1]} < $@ >"
}

#
# Filter out everything but the while loop and the two boundary markers.
# Then filter out anything that does not have a ')' in it.  Voila, instant
# help message!
#
help_msg()
{
        local CLR0=

        CLR0="${!1}" ; shift
        echo -e "${CLR0}"
        sed -n -e '/^### HELP.*start/,/^### HELP.*end/p' "$0" |
               sed -e '/^### HELP/,/case/d' -e '/esac/,/^### HELP/d' -e '/;;/d'
        echo -e "${RESET}"
}

#
# Print the list of default apps.
#
list_apps()
{
        funcname $@
        for i in "$@" ; do
                echo -e "\t$i"
        done
        echo ""
}

#
# Output var and contents and
# do some modest alignment by
# adding a space at the beginning
# and an extra tab for shorter
# vars.
#
print_keyval()
{
        funcname $@
        declare -a Arg_List=
        local CLR0=
        local CLR1=

        CLR0="${!1}" ; shift
        CLR1="${!1}" ; shift

        Arg_List=( "$@" )

        for var in "${Arg_List[@]}" ; do
                echo_err -n " ${CLR0}$var${RESET}\t"
                [ "${#var}" -lt 7 ]  && echo_err -n "\t"
                echo_err "(${CLR1}${!var}${RESET})"
        done
}

#
# Print the list of colors available along with illustrative text.
#
print_colors()
{
        funcname $@
        local key=
        local akey=
        local Fore=

        Fore="$1"; shift

        for key in RED BLUE LTBLUE YELLOW GREEN PURPLE; do
                aKey="${!key}"
                [ "$Fore" = "0" ] && aKey="$(echo $aKey | sed -e 's/;3/;37;4/')"
                echo -n -e "$key:\t"
                [ "${#key}" -lt 8 ] && echo -n -e "\t"
                echo -e "${aKey}Some sample text.${RESET}"
        done
}

#
# Find out what kind of source tree we're in. Builds are configured
# one way for say, nuttx, and another for fast_api.
#
# Assumes already in the repo tree.
#
find_repo_type()
{
        funcname
        git remote -v | grep fetch | sed -e 's/^.*\///' -e 's/ *(.*)//' -e 's/\.git//'
}

find_repo_root()
{
        funcname
        if ! git rev-parse >/dev/null 2>&1 ; then
                echo_err "Not running within a git repo.  Please relocate."
                exit 1
        fi
        git rev-parse --show-toplevel
}

#
# fixed list of targets deferential to the future.
#
set_fastapi_targets()
{
        funcname $@
        echo "zeus1 clean simlib sim distclean zeus2 clean simlib sim "
}

set_nuttx_app_list()
{
        funcname $@
        local Board_Cfg=
        local File_Key=
        local count=
        local fresults=
        declare -a pieces=

        [ "$#" -ne 2 ] && return 1
        Board_Cfg="$1" ; shift
        File_Key="$1" ; shift

        fresults="$(find configs -type d -name $Board_Cfg)"
        [ -z "$fresults" ] && return 1

        pieces=( $(echo $fresults | sed -e 's/\// /g') )
        count=$(( ${#pieces[@]} + 1 ))
        echo_dbg "fresults: ($fresults), count: [$count]"

        pieces=( $(ls $fresults/*/$File_Key | cut --delim='/' -f $count) )
        echo "${pieces[@]}"
}

#
# Take care of generating the requested output.
#
run_output()
{
        funcname $@
        local COLOR0=
        local COLOR1=

        [ -n "$1" ] && COLOR0="${!1}" ; shift
        [ -n "$1" ] && COLOR1="${!1}" ; shift

        if [ "$RUN_HELP" = "yes" ] ; then
                help_msg COLOR0
        fi
        if [ "$PRINT_KV" = "yes" ] ; then
                print_keyval  COLOR0 COLOR1 "${ARG_LIST[@]}"
        fi
}

#
# Make an application for this board.
#
make_one_target()
{
        funcname $@
        local Verbose=
        local Incremental=
        local Target=

        Target="$1" ; shift
        Incremental="$1" ; shift
        Verbose="$1" ; shift

        echo_dbg "Target is $Target"
        CMD=( "make" "Q=$Q" "$NO_ERRORS" "$Target" )

        [ "${1,,}" = "verb" ] && Verbose="" ; shift
        [ "${Incremental,,}" = "yes" ] && CMD[1]="Q="

        echo_dbg "${#CMD[@]} :: ${CMD[@]}"
        echo_dbg "CMD[0] : ${CMD[0]}"
        echo_dbg "CMD[1] : ${CMD[1]}"
        echo_dbg "CMD[2] : ${CMD[2]}"
        echo_dbg "CMD[3] : ${CMD[3]}"

        eval ${CMD[@]}
}

build_fastapi()
{
        funcname $@
        declare -a Targets=
        local OutFile=
        local repo_type=
        local Fails=

        Fails=0
        repo_type="fast_api"
        Targets=( $(set_fastapi_targets) )
        echo_err "Compiling for $repo_type"
        echo_dbg "Targets are: ${Targets[*]}"

        for target in distclean ${Targets[@]} ; do
            echo_dbg "\tbuild target <$target>"
            OutFile="${OUT}.${repo_type}.${target}"
            echo_err -n "\tBuilding $target ... "
            if ! make_one_target $target > $OutFile  2>&1 ; then
                echo_err "Build failed: $target. Rebuilding with verbose flag" > $OutFile 2>&1 
                make_one_target $target "yes" "verb" > $OutFile 2>&1
                [ -z "$Q" ] && echo_err "Failed building $target.  See $OutFile"
                tail -25 ${OutFile}
                Fails=$(( Fails + 1 ))
                echo_dbg "\tFails:  <$Fails>, continue"
                echo_err "\t\tFailed."
                continue
            fi
            echo_err "\t\tSucceeded."
        done
        [ "$Fails" -ne 0 ] && echo_err "$Fails builds failed."


        return $Fails
}

build_nuttx()
{
        funcname $@
        local OutFile=
        local repo_type=
        local Fails=

    Fails=0
    [ "${#BOARDS[@]}" -eq 0 ] && [ -n "$BOARD" ] && BOARDS=( "$BOARD" )
    [ "${#BOARDS[@]}" -eq 0 ] && echo_err "No board config specified, chose among these:" && \
                if ! BOARDS=( $(select_board "${BOARDS_LIST[@]}") ) ; then
                        echo_err "\nExit selected."
                        exit 1
                fi
                echo_dbg "BOARDS ${BOARDS[*]}"

    for board in "${BOARDS[@]}" ; do
        echo_err ":::: Compiling for Board $board"
        [ ${#TARGETS[@]} -eq 0 ] && TARGET_DIRS="$(set_nuttx_app_list $board $FILE_KEY)"
        [ ! -d "configs/$board" ] && echo_err "Not found: $board" && continue
        (
            cd configs/$board >/dev/null
            if [ "$INCREMENTAL_BUILD" != "yes" ] ; then
                echo_err "Running distclean to start from a clean slate."
                make_one_target distclean >/dev/null
            fi
            for build in $TARGET_DIRS "${TARGETS[@]}" ; do
                [ -z "${pseudo_targets[$build]}" ] && OutFile="${OUT}.${board}.${build}"
                    echo_err -n "\tBuilding $board :: $build:\t"
                    [ "${#board}" -lt 8 ] && echo_err -n "\t"
                    if ! make_one_target $build > $OutFile  2>&1 ; then
                            [ -z "$Q" ] && echo_err "Build failed see ${OutFile}." && continue
                            echo_err "Failed.\n"
                            echo_err "\tRunning an incremental verbose build ::"
                            make_one_target $build "yes" "verb" > $OutFile 2>&1

                            tail -45 ${OutFile}
                            Fails=$(( Fails + 1 ))
                            continue
                    fi
                    echo_err "...\tSucceeded."
            done
            [ "$Fails" -ne 0 ] && set -x
        return 0
        )
    done
}

#
# Return which zeus architecture is configured.
#
fastapi_get_zeus_bldbase()
{
        local ConfigDir=
        local ZeusArch=

        ConfigDir=build/gcc
        [ ! -f $ConfigDir/.config ] && return 1

        ZeusArch=$(grep ^CONFIG_ZEUS.= $ConfigDir/.config)
        ZeusArch=${ZeusArch#CONFIG_ZEUS}
        ZeusArch=${ZeusArch%=y}

        echo zeus${ZeusArch}
}

#
#
#
test_fast_api()
{
        [ -z "$1" ] && return 1
        [ -z "${FASTAPI_BLD_TST_CMDS["$1"]}" ] && return 1

        ${FASTAPI_BLD_TST_CMDS[$1]}
}

#
# The real test function.
#
fastapi_bldtst()
{
        local Target=
        local ZeusArch=
        local TstOutfile=
        local OutputDir=
        local SimExec=

        ZeusArch="$1" ; shift
        Target=$1
        [ -n "$Target" ] && Bld="${Zeus}_${Target}"

        TstOutfile="/tmp/.tst_fastapi_${Bld}"
        OutputDir="output/$ZeusArch/${Target}"
        Lib="libfastapi${target}_${ZeusArch}.a"
        Exec="${Lib:%.a=%.o}"

        [ -f "$OutputDir/$ZeusArch/$Target/$lib" ] && echo_err "Found\t$lib"
        [ -f "$OutputDir/$ZeusArch/$Target/$Exec" ] && echo_err "Found\t$Exec"
        if [ -n "$Target" ] && ! $OutputDir/$Exec > $TstOutfile  2>&1 ; then
                tail -20 $TstOutfile
                return 1
        fi
        if [ -n "$Target" ] && [ -f "$OutputDir/$Exec" ] ; then
                echo_err "Found and ran:\t$Exec"
        fi
        return 0

}

#
#
#
fastapi_zeus_bldtest()
{
        local ZEUS=

        if ! ZEUS=$(fastapi_get_zeus_bldbase) ; then
                echo_err "Unable to determine which zeus build is configured."
                return 1
        fi
        fastapi_bldtst "$ZEUS" "$1"
}

#
#
#
fastapi_sims_bldtest()
{
        fast_zeus_bldtest "$1"
}

#
#
#
test_nuttx()
{
        return
}

#
#
#
spray_contents()
{
        for key in ${!Selection[@]} ; do
                echo_dbg "Setting ${Selection[$key]} to $key"
                NameCheck[${Selection[$key]}]=$key
        done
        for key in ${!NameCheck[@]} ; do
                echo_err "NameCheck for $key = ${NameCheck[$key]}"
        done
}

# print_hash Array_assoc
# foo=$(declare -p Array_assoc | sed -e 's/^.*(//' -e 's/)//' -e 's/\[/\\tArray_assoc\[/g' -e 's/ /\\n/g')
array_copy()
{
        local AName=
        local BName=
        local Tmp=

        AName="$1" ; shift
        BName="$1" ; shift

        echo "================================================="
        declare -p ${AName} | eval sed -e 's/${AName}/${BName}/'
        echo ":: " $Tmp
        eval ${BName}=\([0]="a" [1]="b" [2]="c" [3]="x"\)
#       declare -a Hoo=([0]="a" [1]="b" [2]="c" [3]="x")
#       echo "=== ${BName[@]}"
}

#
# An attempt to generalize use of select so there aren't
# so many case statements to handle them.
#
select_what()
{
        declare -a Cases=
        local MAX_CASES=

        MAX_CASES=10
        Cases=( $@ )
        if [ "${#Cases[@]}" -gt "$MAX_CASES" ] ; then
                echo_err "Too many choices requested.  Please limit to $MAX_CASES choices"
                return 1
        fi

        select Val in ${Cases[@]} ; do
                case "$Val" in
                esac
        done
}


#
#
#
adjust_selection()
{
        declare -a Combo=
        declare -a Selection=
        local Val=

        Selection=( $@  )

        while [ 1 ] ; do
        select Val in "${Selection[@]}" Exit ; do
                echo_err "Val : $Val, REPLY <$REPLY>"
                case "$Val" in
                            "" )  echo_dbg "Val returned NULL and reply is <$REPLY>"
                                break
                            ;;
                        Exit) [ "${#Combo[@]}" -eq 0 ] && return 1
                                echo_dbg "Exit with Combo ${#Combo[@]}"
                                echo "${Combo[@]}" ; return 0
                            ;;
                             *)
                                [ -z "$Val"  ] && echo_err "Bad selection: <$REPLY>, try again."
                                Combo[${#Combo[@]}]=$Val
                                unset Selection[$(( REPLY - 1 ))]
                                break
                            ;;
                esac
                echo_err "${Combo[*]}"
                sleep 1
        done
        done
}

#
# Assemble a list of configs directories available for builds
# and if it is more than 1 generate a menu selection and have
# the user spec which board config to use.
#
select_board()
{
        funcname $@
        local Val=
        local BOARD_LIST=
        local Exit=
        local All=

        Exit=exit
        All=all
        BOARD_LIST=( $(ls configs/*/Makefile | awk -F'/' '{print $2}') )

        select Val in "${BOARD_LIST[@]}" all combo Exit ; do
                echo_dbg "Pre case op:: Val : <$Val>,  REPLY : <$REPLY>"
                case "$Val" in
                 ""          )  echo_dbg "Val returned NULL and reply is <$REPLY>"
                                sleep 1
                 ;;
                "Exit"|"exit") echo_dbg "Exiting, returning 1"
                               return 1
                 ;;
                "all"        )  echo_dbg "All boards selected:"
                                echo "${BOARD_LIST[@]}"
                                        return 0
                 ;;
                 combo       )  if ! BOARD_LIST=( $(adjust_selection ${BOARD_LIST[@]}) ) ; then
                                        echo_dbg "Could not adjust the selction."
                                        return 1
                                fi
                                echo "${BOARD_LIST[@]}"
                                        return 0
                 ;;
                *            )  echo "$Val"
                                        return 0
                 ;;
                esac
        done


        #
        # When all or a combo of boards is selected:
        #
        echo "${BOARD_LIST[@]}"

        return 0
}

trace && set -x

cd $(find_repo_root) || exit 1

### HELP message start
while [ $# -ne 0 ] ; do
        case "$1" in
        #
        # Specify the directory to build from
        -b) [ -n "$2" ] && [ -d "configs/$2" ] && BOARDS[${#BOARDS[@]}]="$2";
                shift
                ;;
        #
        ## Enhanced background suitable for screens with
        ## light backgrounds
        #
        -c) CONTRAST=1
                ;;
        #
        # Demonstrate the list of colors available to this script. Any
        # following arg determines whether the coloring is in the
        # background (0), or anything else for the foreground.
        #
        --colors*) print_colors "${1#*=}"; exit 0
                ;;
        #
        # The arg paired with --bg and --fg is the
        # name of the color as shown by --colors
        --bg) BACKGROUND="$1"
                ;;
        --fg) FOREGROUND="$1"
                ;;
        #
        # Disable -Werror (warnings are errors)
        -e) NO_ERRORS="NO_ERRORS=1"
        #
                ;;
        -h) RUN_HELP="yes";
                ;;
        -l|--list) list_apps $DEFAULT_APPS && exit 0
                ;;
        -i) INCREMENTAL_BUILD="yes"; # Don't do a distclean first.  Start from last stop.
                ;;
        -p) PRINT_KV="yes";
                ;;
        #
        # Expose the raw commands that make issues.
        -Q) Q="";
                ;;
        #
        # Specify build target. May specify multiple times.
        -t) TARGET_DIRS="$TARGET_DIRS ${2%/}"; shift
                ;;
        -T) TEST="yes"
                ;;
        #
        # Print info beyond success/failure. May specify multiple times.
        -v) VERBOSE="${VERBOSE}V"
                ;;
        #
        # More info on make processing
        -V) V=2
                ;;
        #
        # Specify build target. May specify multiple times.
        *) if [ -n "${pseudo_targets["${1%/}"]}" ] ; then
                TARGET_DIRS="$TARGET_DIRS ${1%/}" ;
           elif [ -n "${make_targets["${1%/}"]}" ] ; then
                TARGET_DIRS="$TARGET_DIRS ${1%/}" ;
           else
#               ARGS_UNXP="$ARGS_UNXP \"$1\""
                TARGETS[${#TARGETS[@]}]="$1"
           fi
                ;;
        esac
        shift
done

### HELP message end
if [ -n "$ARGS_UNXP" ] ; then
        echo_err -n "Unexpected args were encountered. Stop.  "
        echo_err "$ARGS_UNXP"
        echo_err "Perhaps you need to prefix this with '-t'. See help (-h)"
        exit 1
fi

if [ "$RUN_HELP" = "yes" ] || [ "$PRINT_KV" = "yes" ] ; then
        ARG1=
        ARG2=
        [ "$COLOR" = "1" ] && [ "$CONTRAST" = "0" ] && ARG1="LTBLUE" && ARG2="GREEN"
        [ "$COLOR" = "1" ] && [ "$CONTRAST" = "1" ] && ARG1="BLUE" && ARG2="PURPLE"
        run_output  "$ARG1"  "$ARG2"
        exit
fi

OBJS_FILE=/tmp/objs.built
rm -f $OBJS_FILE

#         make_targets["$target"]=1
# done
# DEFAULT_APPS="${!make_targets[@]}"

#
# Main()
#
TARGET_DIRS=${TARGET_DIRS:-$DEFAULT_APPS}
echo_dbg "Targets : (${TARGET_DIRS[*]})"
[ "${VERBOSE:0:1}" = "V" ] && print_keyval

#
# Corner Case: empty value (no mapping set)
# Corner Case: illegal command (nonsense text)
#
echo_dbg "REPO_BUILD_CMDS[$(find_repo_type)] ${REPO_BUILD_CMDS[$(find_repo_type)]}"

${REPO_BUILD_CMDS["$(find_repo_type)"]}


#!/bin/bash

declare -A SYNC_REPOS
SYNC_REPOS["git"]="git_sync_if"
SYNC_REPOS["svn"]="svn_sync_if"
SYNC_REPOS["hg"]="hg_sync_if"

COLOR=1
RESET="\033[0;39;49m"
BLACK="\033[1;30m"
RED="\033[1;31m"
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
LTBLUE="\033[1;36m"
PURPLE="\033[1;35m"
REDBLK="\033[1;31;40m"
REDYLW="\033[1;31;43m"
REDBLU="\033[1;31;46m"
GRNBLK="\033[1;32;40m"
GRNGRN="\033[1;32;42m"
GRNPRPL="\033[1;32;45m"
YLWBLK="\033[1;33;40m"
YLWRED="\033[1;33;41m"
YLWGRN="\033[1;33;42m"
YLWBLU="\033[1;33;44m"
YLWLTBLU="\033[1;33;46m"

Func()
{
        echo_dbg "=== ${FUNCNAME[1]}()"
}

trace()
{
        [ "$TRACE" = "1" ] && set -x
        return 1
}

debug()
{
        [ "$DEBUG" = "1" ] && return 0
        return 1
}

color()
{
        [ "$COLOR" = "1" ] && return 0
        return 1
}

echo_err()
{
        echo -e "$@" >&2
}

echo_dbg()
{
        debug || return 1
        echo_err "$@"
}

color_on()
{
        color && echo -n -e "${!1}"
}

POS_TRACKING_REF=3

#
# Find the remote branch name backing this local branch.
#
get_tracking_ref()
{
        Func
        local Foo=
        local Goo=

        #
        # List all the working branches and deleting anything with leading ws.
        #
        WorkBranch=( $(git branch -vv | sed -e '/^[      ]\+/d' -e 's/^\*/\[*\]/') )
        debug && dump_array "${WorkBranch[@]}"
        if [ "${WorkBranch[$POS_TRACKING_REF]:0:1}" != "[" ] ; then
                echo "This branch has no tracker." >&2
                return 1
        fi
        echo "${WorkBranch[$POS_TRACKING_REF]:1:-1}" | awk -F'/' '{print $2}'
}


#
# Find the remote branch name backing this local branch.
#
Get_tracking_ref()
{
        Func
        local Foo=
        local Goo=

        Foo=$(git branch -vv | sed -e '/^[ 	]\+/d' | awk '{print $4}')
        [ "${Foo:0:1}" = "[" ] && basename ${Foo:0:-1}
}

#
# See if there are any files staged or waiting to be staged.
#
changes_in_flight()
{
        Func
        [ -n "$(git status -sb | sed -n -e '2p' -e 's/\?//g')" ] && return 0
        return 1
}

#
# Operating within the targeted repo check the remote's hash for HEAD
# and compare it with the local's hash for HEAD.  If matched move on.
# 
# If not matched then prepare the local tree to sync with the remote
# by changing branches to the default branch, stashing anything waiting,
# pulling and then changing back to the initial branch popping the stash 
# 
git_sync_if()
{
        Func
        trace && set -x
        color_on YLWBLU
        local Tracker=
        local RemoteHash=
        local LocalHash=
        local Ahh=

        if ! RemoteHash=$(git ls-remote --exit-code 2>&1 | sed -n -e '2p' -e 's/  *.*//') ; then
                # it is possible the remote repo no longer exists
                echo_dbg "No remote hash found so return 0 given there's nothing to be done."
                color_on RESET
                return 0
        fi
        LocalHash=$(git reflog -1)
        Ahh=$(cat .git/HEAD)
        LocalHash=$(cat .git/${Ahh#* })
        echo_dbg "RemoteHash: ${RemoteHash%[ 	]*}"
        echo_dbg "LocalHash:  ${LocalHash}"

        [ "${RemoteHash%[ 	]*}" = "$LocalHash" ] && \
                                        echo_err "Nothing to do.${RESET}" && \
                                        return 0
        if ! Tracker=$(get_tracking_ref) ; then
                echo_err "Unable to determine tracking branch."
                echo_dbg ""
                return 1
        fi
        changes_in_flight && git stash save "Temp save while switching to $Tracker and pulling"
        if ! git checkout $Tracker ; then
                echo_dbg "Checkout of $Tracker ... Failed."
                color_on RESET
                return 1
        fi
        if ! git pull ; then
                echo_dbg "git pull failed."
                color_on RESET
                return 1
        fi
        color_on RESET
}

svn_sync_if()
{
        Func
        color_on GRNPRPL
        svn update
        color_on RESET
}

hg_sync_if()
{
        Func
        color_on GRNPRPL
        hg  update
        color_on RESET
}

trace
# PUSHD=( "pushd" ">" "/dev/null" "2>&1" )
# POPD=( "popd" ">" "/dev/null" "2>&1" )
PUSHD=( "pushd" ">" "/dev/null" )
POPD=( "popd" ">" "/dev/null" )
TMPFILE=$(mktemp -p /tmp -t .$(basename $0).XXXX)
echo "Logging results to $TMPFILE"

    (
        echo "Find all .git and .svn repos ..."
        find -L . -type d -name .svn -o -type d -name .git | while read Path ; do
                Path=${Path:2}
                repo_type="$(basename $Path)"
                echo_dbg "repo_type:  $repo_type"
                Repo="$(basename ${Path%/$repo_type})"
                echo_dbg "pushd to ${Path}"
                echo_dbg "Path: $Path, {Path%/*} : ${Path%/*}, dirname Path : $(dirname $Path)"
                echo  "Sync ${Path%/$repo_type} ... "
                if ! eval "${PUSHD[@]}" "${Path%/*}" ; then
                        echo "Failed for ${Path%/*}"
                        color_on RESET
                        sleep 2
                        continue
                fi
                echo_dbg ${SYNC_REPOS["${Path##*.}"]}
                echo_dbg "repo type: $repo_type"
                if ! eval ${SYNC_REPOS["${Path##*.}"]} ; then
                        color_on YLWRED
                        echo_dbg "Path: $(dirname $Path), ./ == $(pwd) cmd=${SYNC_REPOS["${Path##*.}"]}"
                        echo_err "\nFailed to sync repo $Path${RESET}"
                        debug && exit 3
                        eval ${POPD[*]}
                        sleep 3
                        continue
                fi
                echo ""
                debug && dirs -v
                eval ${POPD[*]}
                echo_err "========================================================="
                echo_err "========================================================="
                sleep 1
        done
    ) |&  tee -a $TMPFILE



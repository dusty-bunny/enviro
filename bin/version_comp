#!/bin/bash

#
# Compare version strings of the form 1.2.3.4
# and return true if the first version string
# is greater than the second.
#
string_version_check()
{
        local Ver1=
        local Ver2=
        local Count=

        ([ -z "$1" ] || [ -z "$2" ]) && echo "Two strings are required." >&2 && return 1
        Ver1=( $(echo "$1" | sed -e 's:\.: :g') ) && shift
        Ver2=( $(echo "$1" | sed -e 's:\.: :g') ) && shift

        Count=${#Ver1[@]}
        [ "$Count" -ge "${#Ver2[@]}" ] || Count=${#Ver2[@]}

        for i in $(seq 0 $Count) ; do
                [ -z "${Ver1[$i]}" ] && Ver1[$i]=0
                [ -z "${Ver2[$i]}" ] && Ver2[$i]=0
                [ "${Ver1[$i]}" -ge "${Ver2[$i]}" ] && continue
                return 1
        done
}

#
#
#
brute_force()
{
        declare -a Current=
        declare -a local Reference=

        Reference=( $(echo "$1" | awk -F'.' '{print $1 " " $2 " " $3}') ) ; shift
        Current=( $(echo "$1" | awk -F'.' '{print $1 " " $2 " " $3}') ) ; shift
        ( [ ${Reference[0]} -ge ${Current[0]} ]  &&       \
        [ ${Reference[1]} -ge ${Current[1]} ]   &&      \
        [ ${Reference[2]} -ge ${Current[2]} ])    ||     \
        return 1
}

if ! brute_force "$1" "$2" ; then
        echo "$2 is King, $1 is old hat."
        exit 1
fi

if ! string_version_check "$1" "$2" ; then
        echo "Version $2 is greater than $1"
        exit 1
fi

echo "Version $1 is greater than or equal to $2"

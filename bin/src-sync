#!/bin/bash

declare -A comments

[ "$TRACE" = "1" ] && set -x

comments["blank_line"]="\040*"
comments["copyright"]="Copyright (C) xYEARx"
comments["hdr_intro"]='#if !defined(xxx)\n#define xxx\n'
comments["hdr_outro"]='#endif /* xxx */'
comments["c+intro"]='#undef EXTERN\n#if ddefined(__cplusplus)\nn#define EXTERN extern "C"\nextern "C"\n{\n#else\n#define EXTERN extern\n#endif'
comments["c+outro"]='#undef EXTERNa\n#if defined(__cplusplus)\n}\n#endif.'
comments["intro"]='/******************************************************************************'
comments["outro"]='\040*****************************************************************************/'
comments["section_name"]='\040* Name: xxx'
comments["section_descr"]='\040* Description:'
comments["section_params_in"]='\040* Input Parameters:'
comments["section_returned_val"]='\040* Returned Value:'
comments["pre-proc-defs"]='\040* Pre-processor Definitions'
comments["public-types"]='\040* Public Types'
comments["public-data"]='\040* Public Data'
comments["public-func-prot"]='\040* Public Function Prototypes'
comments["included-files"]='\040* Included Files'
comments["assembly-macros"]='\040* Assembly Macros'
comments["driver-func-proto"]='\040* Driver Function Prototypes'
comments["inline-funcs"]='\040* Inline Functions'
comments["lib-func-protos"]='\040* Library Function Prototypes'
comments["pre-proc-decls"]='\040* Pre-processor Declarations'
comments["private-data"]='\040* Private Data'
comments["private-funcs"]='\040* Private Functions'
comments["private-types"]='\040* Private Types'
comments["public-funcs"]='\040* Public Functions'
comments["public-type-defs"]='\040* Public Type Definitions'
comments["type-decls"]='\040* Type Declarations'

HEADER_SECTIONS=( "pre-proc-defs" "private-data" "private-types" "public-data" "public-types" )

mk_func_comments()
{

        local File=
        local FuncName=

        [ ! -f "$1" ] && echo "No file specified" >&2 && return 1
        File="$1" ; shift
        FuncName="$1" ; shift

set -f
        echo -e ${comments["intro"]}
        echo -e ${comments["blank_line"]}
        echo -e ${comments["section_name"]}  | eval sed -e 's/xxx/$FuncName/'
        echo -e ${comments["blank_line"]}
        echo -e ${comments["section_descr"]} 
        echo -e ${comments["blank_line"]}
        echo -e ${comments["section_params_in"]} 
        echo -e ${comments["blank_line"]}
        echo -e ${comments["section_returned_val"]} 
        echo -e ${comments["blank_line"]}
        echo -e ${comments["outro"]}
set +f
}

set_copyright()
{
eval cat <<"EOF"
/****************************************************************************
 * xPATH
 *
 *   Copyright (C) 2007-2017 Gregory Nutt. All rights reserved.
 *   xAUTHOR
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name NuttX nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/
EOF
}

#
# Output text to label a code section in the file.
#
section_add()
{
        local Title=

        if [ -z "${comments["$Title"]}" ] ; then
                return 1
        fi
}

ROOT="$(git rev-parse --show-toplevel)"/
hdr_entry_block()
{
        local File=
        local FName=
        local HeaderDef=
        local Root=

        Root="$1" ; shift
        [ ! -f "$1" ] && echo "Bad file: $1:" >&2 && return 1
        File="$1" ; shift

        FName="${File#$Root}"
        HeaderDef="__$( echo $FName | sed -e 's:[./]:_:g')"

        echo -n -e "$FName\t"
        echo -e "${HeaderDef^^}"
}

spacer()
{
        echo -e "\n\n"
}

mk_header_file()
{
        local File=
        local Root=

        [ ! -f "$1" ] && echo "Nope. No file here." >&2 && return 1
        File="$1" ; shift
        Root="$1" ; shift
        set -f
        HEADER_INFO=( $(hdr_entry_block $Root $File) )
        set_copyright | eval sed -e 's:xPATH:${HEADER_INFO[0]}:' -e \'s,xAUTHOR,Author: $OWNER,\'
        spacer
        set +f
        echo -e "${comments[hdr_intro]}" | eval sed -e \'s:xxx:${HEADER_INFO[1]}:g\'
        base_includes nuttx/config sys/types stdint stdbool string  erno debug
#       add_other_includes
        spacer

        for section in "${HEADER_SECTIONS[@]}" ; do
                mk_comment_section  $section
                spacer
        done

        mk_func_comments "$SRCFILE" up_send
        spacer
        echo -e "${comments[hdr_outro]}" | eval sed -e \'s:xxx:${HEADER_INFO[1]}:g\'
}

#
# Output a header section header.
#
mk_comment_section()
{
        local Key=

        Key="$1" ; shift

        echo -e "${comments[intro]}"
        echo -e "${comments[$Key]}"
        echo -e "${comments[outro]}\n"
}

#
# Output a set of base include directives"
#
base_includes()
{
        declare -a Incs=
        local entry=

        Incs=( "$@" )

        mk_comment_section "included-files"

        for entry in "${Incs[@]}" ; do
                echo "#include <$entry.h>"
        done
        echo -e "\n"
}

file="$1"
[ ! -f "$file" ] && exit 1
OWNER="$(git config --global user.name) <$(git config --global user.email)>"
SRCFILE=/tmp/boo
touch "$SRCFILE"

mk_header_file $file $ROOT  > $SRCFILE


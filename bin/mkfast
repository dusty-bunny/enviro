#!/bin/bash

DEBUG=${DEBUG:-0}
[ "$TRACE" = "1" ] && set -x
declare -a Output=
# declare -a DELIVERABLES=

echo_err()
{
        echo -e "$@" >&2
}

echo_dbg()
{
        [ "$DEBUG" != "1" ] && return

        echo -e ":: $@" >&2
}

retrieve_configs()
{
        local Hash=

        Hash="$1"
        if ! git checkout "$Hash" build/configs >/dev/null 2>&1 ; then
                echo "Could not checkout config directory." >&2
                return 1
        fi
}

#
# Wrap make to generalize an interface that automatically captures the output
#
do_make()
{
        local CommitHash=
        local Target=
        local Arch=

        if [ $# -lt 3 ] ; then
                echo "Insufficient number of args: [$#]" >&2
                return 1
        fi

        CommitHash="$1" ; shift
        Target="$1" ; shift
        Results="$1"   ; shift

#       cp "$TMPDIR/$Config" .config
#       make ${MAKE_OPTS} deliverables $Target | tee $Results | sed -e '/=/s/^.*=//'
        make ${MAKE_OPTS} $Target | tee $Results
}

#
#
#
print_array()
{
        [ "$DEBUG" = "1" ] || return 1

        for i in $(seq 0 1 $#) ; do
                echo -e "\t$1"
                shift
        done
}

#
# Arg1 : File to serve as a reference time stamp.
#
validate_files()
{
        local Rv=
        local RefTime=
        local Arch=
        local File=

        RefTime="$1" ; shift

        Rv=0

    (
        cd ../../output || return 1
        echo "========================================"
        echo "       Validate ${SET[1]} build."
set -x
        for File  in "${DELIVERABLES[@]}" ; do
                echo_err "File  == $File"
                if [ -f "$File" ] ; then
                        if [ "$RefTime" -ot "$File" ] ; then
                                continue
                        else
                                echo_err "Old file: $File"
                        fi
                else
                        echo_err "Missing file: $File"
                fi
                Rv=$(( Rv + 1 ))
        done 
set +x
        return $Rv
    )
}

if ! ROOT=$(git rev-parse --show-toplevel) ; then
        echo "This directory is not in a git repo or maybe within the .git dir." >&2
        echo "Please run this script from anwyhere within the fast_api repo." >&2
        echo "" >&2
        exit 1
fi
if [ ! -f "$ROOT"/build/gcc/Makefile ] ; then
        echo "Can't find $ROOT/build/gcc/Makefile." >&2
        echo "Please relocate to a fast_api repo tree." >&2
        echo "" >&2
        exit 2
fi
TMPDIR=/tmp
TARFILE=$(mktemp -p "$TMPDIR" .config_XXX)
# echo "TARFILE  :: ($TARFILE)"
FOOFILE=/tmp/foo

[ ! -f $TARFILE ] && echo_dbg "Unable to create a tar file name." && exit 1

[ "$DEBUG" = "1" ] && MAKE_OPTS='Q='
sed -e '1,/^## ::/d' "$0" > ${TARFILE}.xxd
xxd -r ${TARFILE}.xxd > ${TARFILE}
TARGETS=( $(tar -C "$TMPDIR" -zxvf $TARFILE) )
echo_dbg "Number of targets: [${#TARGETS[@]}]"
echo_dbg "Targets are:"
print_array "${TARGETS[@]}"
CLEAR=clean
CLEAR=distclean
CONFIG=.config
COMMIT_HASH=056ac757144fc5d008c7141a50e31e1fcc9e8233

eval rm -f "${TARFILE%_*}*"
    (
        cd $ROOT && retrieve_configs "$CommitHash"
        cd "$ROOT/build/gcc" || exit 1

        do_make "$COMMIT_HASH" distclean /tmp/foo >/dev/null 2>&1
        rm -f "$ROOT/test.zeus*.txt"
        for i in $(seq 0 1 3) ; do
                echo_dbg "TARGETS[$i] :: ${TARGETS[$i]}"
                SET=( $(echo ${TARGETS[$i]} | awk -F'.' '{print $2 " " $3}') )
                if [ "${#SET[@]}" -lt 2 ] ; then
                        echo "Not enough members to SET: [${#SET[@]}]" >&2
                        exit 5
                fi

                OUTFILE="$ROOT"/test."${SET[0]}"."${SET[1]}".txt
                echo -e -n "Test build of ${SET[1]} for ${SET[0]}\t"
                if Output=( $(do_make "${TARGETS[$i]}" "${SET[1]}" "$OUTPUT" "${SET[0]}" | sed -n -e '/=/p')) ; then
                        echo_err "${#Output[@]} :: ${Output[@]}"
                        eval "${Output[@]}"
                        echo_err "Deliverables: [ ${DELIVERABLES[@]} ]"
                        [ -f "$OUTFILE" ] && rm -f "$OUTFILE"
                        if validate_files $CONFIG "${SET[0]}" "${SET[1]}" >>$OUTFILE ; then
                                echo "Success"
                                rm $OUTFILE
                        else
                                echo "Fail" >&2
                                Rv=1
                        fi
                else
                        echo "Failed"
                fi
                do_make "${TARGETS[$i]}" "$CLEAR" "$OUTPUT" "${SET[0]}" >/dev/null 2>&1
                sleep 1
        done
    )

    cd /tmp
    rm -f "${TARGETS[$val]}"
    if ERR_OUTS=( $(ls "$ROOT"/test.zeus*.txt 2>/dev/null)  ) ; then
        echo "Fail!!" >&2
        echo -e "See files $(echo ${ERR_OUTS[@]} | sed -e 's/^/\\n\\t/' -e 's/ /\\n\\t/g')\nfor details." >&2
        exit  1
    else
        rm -f $FOOFILE
        echo "Success!!"
    fi
exit  0
## :: End of ascii shell code.
00000000: 1f8b 0800 ef08 cc5a 0003 ed96 5f6f b230  .......Z...._o.0
00000010: 14c6 b9f6 5334 f1de d082 7ab1 ec82 4175  ....S4....z...Au
00000020: 4d18 2502 fb77 d318 c70c 09d3 3703 2eb6  M.%..w......7...
00000030: 4fbf 16dd 521c 1b5b dea8 797d cfef 42d2  O...R..[..y}..B.
00000040: 9ea7 e7d4 8acf e962 bd7a cc96 83d7 b42a  .......b.z.....*
00000050: f0a0 c89e 8c3d 604a 46b6 ad9e 783c 34f5  .....=`JF...x<4.
00000060: a702 9be3 b181 2d62 8f6c 39c0 43c3 c416  ......-b.l9.C...
00000070: b689 81cc 7d6c 6697 aa28 e7cf 0819 afcb  ....}lf..(......
00000080: bc4a bfd1 75c5 ff51 fabd 3e72 aa72 fd34  .J..u..Q..>r.r.4
00000090: 2fb3 c53c cf5f d032 5da5 cff3 327d 408f  /..<._.2]...2}@.
000000a0: 599e 9e21 8fa3 80c7 887a 2c1e 48f1 c489  Y..!.....z,.H...
000000b0: 62e4 840c b9f5 9b53 4969 b65e f5fa bd9e  b......SIi.^....
000000c0: 4a75 5165 f903 2ad2 b2fa 23c7 2e0f 266c  JuQe..*...#...&l
000000d0: 2a3c 7a91 4c85 4faf a97f 4ea4 683b cd31  *<z.L.O...N.h;.1
000000e0: ca0a b45a 974a ffae e5e4 fc45 9358 baa4  ...Z.J.....E.X..
000000f0: aef0 517f b153 7fbb e49e 2611 d673 a809  ..Q..S....&..s..
00000100: f229 cdbd 7ae1 5bbf 879e 47a8 6a62 c693  .)..z.[...G.jb..
00000110: 9805 53b1 8924 3327 663c 1072 ad2c d350  ..S..$3'f<.r.,.P
00000120: cb41 40dd 5844 7751 4caf be53 b897 2c6c  .A@.XDwQL..S..,l
00000130: 8b7b 2cea 4ea2 89be ca13 f21b 3a13 9173  .{,.N.......:..s
00000140: adf6 dd96 a2fe 4936 81e6 4989 489e 8976  ......I6..I.H..v
00000150: 5a3b 5146 5c3d 7aec d717 f84b 16ba ffab  Z;QF\=z....K....
00000160: cf3d d4f8 95ff 13ac fcdf b286 e0ff 8700  .=..............
00000170: fc1f fc1f fcff ff45 f37f 72ac fb3f 190f  .......E..r..?..
00000180: 35ff dfde ff6d f0ff 4370 3afe df30 aab6  5....m..Cp:..0..
00000190: d4b5 81c9 ec1f fe4f bafc bf36 c3cf 0eb9  .......O...6....
000001a0: e381 8dd8 6f1a 06e9 6c18 a4a3 6190 9f34  ....o...l...a..4
000001b0: 0cd2 dd30 4847 c390 f12b e6b6 cdfb d46b  ...0HG...+.....k
000001c0: 9b9e 868c 0b7a 1b3a 8127 d3b6 0878 dcba  .....z.:.'...x..
000001d0: 8d89 93f8 b1b8 94cb fc2f 36a2 77ae 63ff  ........./6.w.c.
000001e0: 794e 8086 ff1f e9fe dff0 7fcb dcdc ff47  yN.............G
000001f0: e0ff 8700 fc1f fc1f fc1f 0000 0000 0000  ................
00000200: 0000 0000 00e0 7479 0338 88a5 b700 2800  ......ty.8....(.
00000210: 00                                       .

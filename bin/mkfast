#!/bin/bash

DEBUG=0
[ "$TRACE" = "1" ] && set -x

echo_dbg()
{
        [ "$DEBUG" != "1" ] && return

        echo -e "$@" >&2
}

#
# Wrap make to generalize an interface that automatically captures the output
#
do_make()
{
        local Config=
        local Target=
        local Arch=

        if [ $# -lt 3 ] ; then
                echo "Insufficient number of args: [$#]" >&2
                return 1
        fi

        Config="$1" ; shift
        Target="$1" ; shift
        Arch="$1"   ; shift

        echo "Making ${Target} for ${Arch} architecture"
        cp "$TMPDIR/$Config" .config
        make ${MAKE_OPTS} $Target
# > test.${Arch}-${Target}.txt 2>&1
}

#
#
#
print_array()
{
        [ "$DEBUG" = "1" ] || return 1

        for i in $(seq 0 1 $#) ; do
                echo -e "\t$1"
                shift
        done
}

#
# Arg1 : File to serve as a reference time stamp.
#
validate_files()
{
        local Rv=
        local Tmp=
        local RefTime=
        local Arch=
        local Target=
        declare -a Output=

        RefTime="$1" ; shift
        Arch="$1"    ; shift
        Target="$1"  ; shift

        Tmp=fast_api_include_${Arch}.h

        Output=( "fast_api_include.h" "$Tmp" )
        if [ "$Target" = "zeus" ] ; then
                Output=( "${Output[@]}" "fast_api.lib" "map/fast_api.list" "map/System_Fast.map" )
        elif [ "$Target" = "sim" ] ; then
                Output=( "${Output[@]}" "sim/fast_api_sim.o" )
        fi
        Rv=0

    (
        cd ../../output || return 1
        echo "========================================"
        echo "       Validate ${SET[1]} build."

        for file  in "${Output[@]}" ; do
                echo_dbg "  == $file"
                if [ ! -f "$file" ] ; then
                        echo "Missing file: $file"
                        Rv=$(( Rv + 1 ))
                        continue
                fi

                if [ "$RefTime" -nt "$file" ] ; then
                        echo "Old file: $file"
                        Rv=$(( Rv + 1 ))
                        continue
                fi
        done 

        [ -f fast_api_include.h ] &&  \
        if ! diff fast_api_include.h "$Tmp" >/dev/null ; then
                echo "fast_api_include.h does not match $Tmp"
                Rv=1
        fi
        return $Rv
    )
}

if ! ROOT=$(git rev-parse --show-toplevel) ; then
        echo "This directory is not in a git repo or maybe within the .git dir." >&2
        echo "Please run this script from anwyhere within the fast_api repo." >&2
        echo "" >&2
        exit 1
fi
if [ ! -f "$ROOT"/build/gcc/Makefile ] ; then
        echo "Can't find $ROOT/build/gcc/Makefile." >&2
        echo "Please relocate to a fast_api repo tree." >&2
        echo "" >&2
        exit 2
fi
TMPDIR=/tmp
TARFILE=$(mktemp -p "$TMPDIR" .config_XXX)
# echo "TARFILE  :: ($TARFILE)"

[ ! -f $TARFILE ] && echo_dbg "Unable to create a tar file name." && exit 1

MAKE_OPTS='Q='
# [ "$DEBUG" = "1" ] && MAKE_OPTS='Q='
sed -e '1,/^## ::/d' "$0" > ${TARFILE}.xxd
xxd -r ${TARFILE}.xxd > ${TARFILE}
TARGETS=( $(tar -C "$TMPDIR" -zxvf $TARFILE) )
echo_dbg "Number of targets: [${#TARGETS[@]}]"
echo_dbg "Targets are:"
print_array "${TARGETS[@]}"
CLEAR=clean
CLEAR=distclean
CONFIG=.config

eval rm -f "${TARFILE%_*}*"
    (
        cd $ROOT/build/gcc

        do_make config.zeus1.sim distclean zeus1 >/dev/null 2>&1
        rm -f test.zeus*.txt
        for i in $(seq 0 1 3) ; do
                echo_dbg "TARGETS[$i] :: ${TARGETS[$i]}"
                SET=( $(echo ${TARGETS[$i]} | awk -F'.' '{print $2 " " $3}') )
                if [ "${#SET[@]}" -lt 2 ] ; then
                        echo "Not enough members to SET: [${#SET[@]}]" >&2
                        exit 5
                fi

                OUTFILE=test."${SET[0]}"."${SET[1]}".txt
                echo -e -n "Test build of ${SET[1]} for ${SET[0]}\t"
                if do_make "${TARGETS[$i]}" "${SET[1]}" "${SET[0]}" > $OUTFILE 2>&1 ; then
                        if validate_files $CONFIG "${SET[0]}" "${SET[1]}" >>$OUTFILE ; then
                                echo "Success"
                                rm $OUTFILE
                        else
                                echo "Fail"
                                Rv=1
                        fi
                fi
                do_make "${TARGETS[$i]}" "$CLEAR" "${SET[0]}" >/dev/null 2>&1
                sleep 1
        done
    )

    cd /tmp
    rm -f "${TARGETS[$val]}"
    if [ -n "$(ls $ROOT/build/gcc/test.zeus*.txt 2>/dev/null)" ] ; then
        echo "Fail!!"
        exit  1
    else
        echo "Success!!"
    fi
exit  0
## :: End of ascii shell code.
00000000: 1f8b 0800 f98f 965a 0003 ed96 4d6f a330  .......Z....Mo.0
00000010: 1086 39e7 5758 ca3d 02f3 75a8 7aa0 e0a4  ..9.WX.=..u.z...
00000020: 9628 4601 babb bd58 514a 2324 9aac 0a1c  .(F....XQJ#$....
00000030: da5f 5f9b b691 4969 e9aa 4aa2 66e7 3984  .__...Ii..J.f.9.
00000040: e079 3de3 10f3 8e97 9bf5 5db1 9a3c e54d  .y=.......]..<.M
00000050: 654c aae2 5edb 03ba c0b1 2c79 355c 5b57  eL..^.....,y5\[W
00000060: af12 4377 5dcd 30b1 65db e29b e36a ba61  ..Cw].0.e....j.a
00000070: 1a8e a321 7d1f 8bd9 a5a9 eac5 0342 dad3  ...!}........B..
00000080: aa6c f24f 7443 f11f ca78 3446 5e53 6fee  .l.OtC...x4F^So.
00000090: 1775 b15c 94e5 235a e5eb fc61 51e7 b7e8  .u.\..#Z...aQ...
000000a0: ae28 f333 1430 14b1 1491 80a6 1321 9e7a  .(.3.0.......!.z
000000b0: 498a bc98 22bf dd39 8d90 169b f568 3c1a  I..."..9.....h<.
000000c0: c954 174d 51de a22a af9b bfe2 de67 d194  .T.MQ..*.....g..
000000d0: ce78 402e b219 0fc9 3509 cf75 217a 1d66  .x@.....5..u!z.f
000000e0: 062a 2ab4 ded4 52ff a665 f8fc 5191 98aa  .**...R..e..Q...
000000f0: a4ad b0ad bfdc a9ff 3ae5 8664 89a1 e690  ........:..d....
00000100: 03f8 5d9a 1bb9 e17b 7f87 9a87 cb6a 7cce  ..]....{.....j|.
00000110: b294 4633 fe12 c9e6 5e4a 59c4 c55c 51a6  ..F3....^JY..\Q.
00000120: a316 3711 f153 9efc 4952 72f5 99c2 bfa4  ..7..S..IRr.....
00000130: 715f 3ca0 c970 1245 f451 9e98 fd22 739e  q_<..p.E.Q..."s.
00000140: 78d7 72dd 7d29 dabf e425 d07d 523c 11cf  x.r.})...%.}R<..
00000150: 4479 5a3b 518a 7d35 7aec ed0b 7c93 a5ea  DyZ;Q.}5z...|...
00000160: fff2 730f 35be ecff 9683 3176 a4ff 9b36  ..s.5.....1v...6
00000170: 06ff 3f04 e0ff e0ff e0ff ff2f 8aff e363  ..?......../...c
00000180: 9dff b16b bf9d ff2d dbc1 edf9 dfb6 c1ff  ...k...-........
00000190: 0fc1 e9f8 7fc7 a8fa 52b7 0626 b26f fd1f  ........R..&.o..
000001a0: 0ff9 7f6b 86ef 1d72 c703 3bb1 7f69 1878  ...k...r..;..i.x
000001b0: b061 e081 8681 bfd2 30f0 70c3 c003 0d43  .a......0.p....C
000001c0: c4af a8df 371e 92a0 6f78 1653 c6c9 efd8  ....7...ox.S....
000001d0: 8b02 91b6 47c0 d2de 654c bd2c 4cf9 a598  ....G...eL.,L...
000001e0: 167e b010 b573 1dfb e539 013a fe7f a4f3  .~...s...9.:....
000001f0: ffd6 ffd5 f3bf 09fe 7f08 c0ff c1ff c1ff  ................
00000200: 0100 0000 0000 0000 0000 0000 4e97 679e  ............N.g.
00000210: 8191 5700 2800 00                        ..W.(..

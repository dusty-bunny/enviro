#!/bin/bash

DEBUG=${DEBUG:-0}
TRACE=${TRACE:-0}
TMPFILE_EXEC=/tmp/.setup
# DRIVE_B=( "UUID=a1a552cc-2cbf-4467-8b62-410129bdef0e" "/home/zglue/.mnt" "ext4" )
DRIVE_B=( sdb1 /home/$USER/.mnt ext4 )
FSTAB="/etc/fstab"

trace()
{
        [ "$TRACE" = "1" ] && return 0
        return 1
}

debug()
{
        [ "$DEBUG" = "1" ] && return 0
        return 1
}

err_echo()
{
        echo -e "$@" >&2
}

dbg_echo()
{
        debug || return

        echo -e "$@" >&2
}

Func()
{
        debug || return

        echo "[${#FUNCNAME[@]}]  ${FUNCNAME[1]}::"
}

#
# Restart from outside of the git tree so we don't
# overwrite ourselves while running and maybe cause
# an early exit or crash.
#
# This works because the file name changes so the if
# check won't trigger the second time.
#
re-exec()
{
        local TMPFILE_EXEC=

        TMPFILE_EXEC=$(mktemp -p /tmp .$(basename $0).XXXX)

        #
        # Relocate so when we do a git checkout we don't overwrite ourselves.
        #
        if [ "$(basename "$0")" = "set-home" ] ; then
                cat "$0" >  $TMPFILE_EXEC
                cd /tmp ||  exit  1
                chmod +x  $TMPFILE_EXEC
                exec  $TMPFILE_EXEC
        fi
}

#
# Make sure that the caller cloned home-env.git into ~/bin.
# If not then we won't know how to setup ~/bin and ~
#
validate_layout()
{
        # MSG="# Uncomment any one of the colors to provide vim with a color scheme"
        if [ ! -d  ~/bin/home-env/bin ] ; then
                echo "The repo may not be placed correctly. Please make sure" >&2
                echo "that the repo, home-env.git, is cloned into ~/bin." >&2
                return 5
        fi
        return 0
}

mk_vimrc_color()
{
        Func
        local File=
        local VimShareDir=
        local PREAMBLE=

        File=~/.vimrc_color
        VimShareDir=/usr/share/vim

        cat >$File <<"EOF"
"
"
" Uncomment aney ONE of the following color scheme directives
" to have vim colorize the text. Of course comment out any color
" directive in use.
"
"
EOF
        PREAMBLE="\" color "
        find $VimShareDir -type f -name "*.vim" \
                | grep /colors/ \
                | eval sed -e \''s:^.*\/::'\' -e \'s:^:"$PREAMBLE":\' \
                        -e 's:\.vim$::' >> $File
        sed -i -e '/pablo$/s/^\" //' $File

        debug && cat $File
}

git_config_key_init()
{
        Func
        local Key=
        local Val=

        Key="$1" ; shift
        Val="$1" ; shift

        if [ -z "$(git config $Key)" ] ; then
                dbg_echo "Set config $Key to $Val"
                git config "$Key" "$Val"
        fi
}

git_config_for_use()
{
        Func
        local Name=
        local Email=

        Name="$1" ; shift
        Email="$1" ; shift

        git_config_key_init user.name "$Name"
        git_config_key_init user.email "$Email"
        git_config_key_init color.status auto
        git_config_key_init color.status.staged green
        git_config_key_init color.status.unstaged red
#       git config_key_init color.status.untracked yellow
}

#
# Create the sudoers file allowing seamless use;
# no password requested.
#
enable_sudo()
{
        local UFile=

        UFile=/etc/sudoers.d/$USER
        [ -f $UFile ] && return 0

        echo "$USER     ALL=(ALL:ALL) NOPASSWD: ALL" > $UFile
        chmod go-w $UFile
}

mount_sdb()
{
        local DriveUUID=

        [ "${1:0:3}" == "UUID" ] && DriveUUID=$1
	case "${1:0:4}" in
	/dev) [ -b /dev/$1 ] && [ -z "$DriveUUID" ] && Drive=$1 && break
		return 1
		;;
	UUID)  [ -z "$Drive" ] && DriveUUID=$1
		;;
	*)
		echo "Bad arg passed in: $1" >&2
		exit 3
		;;
	esac
	[ -z "$Drive" -a -z "$DriveUUID" ] && echo "No idea what drive to use." >&2 && return 4
	[ ! -d "~/.mnt" ] && mkdir -p ~/.mnt
        [ -n "$DriveUUID" ]  && sudo -H mount UUID=$DriveUUID  ~/.mnt
        [ -n "$Drive" ]  && sudo -H mount /dev/$Drive  ~/.mnt
        (
                cd ~ || die "No home dir found?"

                for entry in $(ls ~/.mnt) ; do
                        [ ! -d "$entry" ] && continue
                        [ "$entry" = "Documents" ] && continue
                        ln -sf ".mnt/$entry"
                done
        )

        #
        # Update $FSTAB to make the mount permanent.
        #
        CMD=( "sed" "-i" "-e" '$a'"$DriveUUID'"  "$FSTAB" )
        sudo "${CMD[@]}"

        cd $HOME
        if [ -f .mn/keys.rsa.tgz ] ; then
	        tar -zxpf .mnt/keys.rsa.tgz
	        mkdir tmp
	        cd tmp
	        tar -zxf ../.mnt/dot.config.tgz
	        cp -a .config ../
        fi

}

enable_bash_aliases()
{
	local BASHRC=~/.bashrc
        local BASH_ALIASES=~/.bash_aliases
	if ! grep "$(basename $BASH_ALIASES)" "$BASHRC" >/dev/null ; then
	        dbg_echo "Setting up bash aliases."
	        # shellcheck disable=2129
                cat > "$BASH_ALIASES" <<"EOF"
	        if [ -f ~/.bash_aliases ] ; then
	                source ~/.bash_aliases
	        fi
EOF
	fi
}

gitcheckout()
{
	local TargetDir=
	local Repo=

	TargetDir=${1%%bin/*} ; shift
	Repo=${1##*/bin/} ; shift
	( cd $TargetDir && [ -d .git ] && git checkout . ) || echo "No .git dir found in $TargetDir" >&2
	cd $TargetDir && git_config_for_use "Bill" "zgluebill@icloud.com"
}

#
# Clone a repo from github.
#
gitclone()
{
	local repo=
	local rootdir=

	rootdir=$1 ; shift
	repo=$1 ; shift
	[ -z "$repo" ] && return 1

	[ ! -d $rootdir ] && mkdir -p $rootdir
	cd $rootdir
	git clone https://github.com/$repo
}

#
# Setup constants
#
instantiate()
{
	declare -g _DIR=~/.local/bin/home-env/.git
	if [ ! -d "$_DIR" ] ; then
		[ ! -d $HOME/.local/bin/home-env/.git ] && echo "No home-env/.git found" >&2 && gitclone $HOME/.local/bin  redorca/home-env.git
		_DIR="$HOME/.local/bin/home-env/.git"
	fi

	echo $_DIR
}

#
# Descend a directory symbolically linking every non dir
# element back to the mentioned home.
#
ln_recursive()
{
	local TargetDir=

	TargetDir=$1
	cd
	find $1 ! -type d | while read Path ; do
		Scruff=${Path##*/.local/}
		(mkdir -p ${Scruff%/*} && cd ${Scruff%/*} && ln -sf $Path)
	done
}

re-exec

# shellcheck disable=2164 pushd ~ >/dev/null

_DIR=$(instantiate)

if [ -d $_DIR/.git ] ; then
        err_echo "Home environment already setup."
        exit 1
fi

[ ! -d $_DIR ] && echo "No ${_DIR: -4} dir found in ${_DIR:0: -4}" && exit 1
( cd ${_DIR%%bin/*} && ln -sf $_DIR ) || exit 2
gitcheckout $_DIR
mk_vimrc_color
cd $HOME
for targ in ~/.local/.??* ; do
	echo "$targ"
	[ -d $targ ] && ln_recursive $targ && continue
	ln -sf $targ
done
exit
enable_bash_aliases
if [ -e /sys/block/$DRIVE_B ] ; then
        if ! mount_sdb $DRIVE_B ; then
		echo "No $DRIVE_B to mount."
		exit 1
	fi
fi


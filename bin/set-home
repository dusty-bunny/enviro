#!/bin/bash

DEBUG=${DEBUG:-0}
TMPFILE_EXEC=/tmp/.setup
BDRIVE="UUID=a1a552cc-2cbf-4467-8b62-410129bdef0e /home/zglue/.mnt  ext4"
FSTAB="/etc/fstab"

#
# Relocate so when we do a git checkout we don't overwrite ourselvves.
#
if [ "$(basename "$0")" = "set-home" ] ; then
        cat "$0" >  $TMPFILE_EXEC
        cd /tmp ||  exit  1
        chmod +x  $TMPFILE_EXEC
        exec  $TMPFILE_EXEC
fi

# VIM_SHARE_DIR=/usr/share/vim
# MSG="# Uncomment any one of the colors to provide vim with a color scheme"
PREAMBLE="# COLOR="
if [ ! -d  ~/bin/home-env/bin ] ; then
        echo "The repo may not be placed correctly. Please make sure" >&2
        echo "that the repo, home-env.git, is cloned into ~/bin." >&2
fi

trace()
{
        [ "$TRACE" = "1" ] && return 0
        return 1
}

debug()
{
        [ "$DEBUG" = "1" ] && return 0
        return 1
}

echo_dbg()
{
        debug || return

        echo -e "$@" >&2
}

Func()
{
        debug || return

        echo "[${#FUNCNAME[@]}]  ${FUNCNAME[1]}::"
}

mk_vimrc_color()
{
        Func
        local File=
        local VimShareDir=

        File=~/.vimrc_color
        VimShareDir=/usr/share/vim

        cat >$File <<"EOF"
"
"
" Uncomment aney ONE of the following color scheme directives
" to have vim colorize the text. Of course comment out any color
" directive in use.
"
"
EOF
        PREAMBLE="\" color "
        find $VimShareDir -type f -name "*.vim" \
                | grep /colors/ \
                | eval sed -e \''s:^.*\/::'\' -e \'s:^:"$PREAMBLE":\' \
                        -e 's:\.vim$::' >> $File
        sed -i -e '/pablo$/s/^\" //' $File

        debug && cat $File
}

git_config_key_init()
{
        Func
        local Key=
        local Val=

        Key="$1" ; shift
        Val="$1" ; shift

        if [ -z "$(git config $Key)" ] ; then
                echo_dbg "Set config $Key to $Val"
                git config "$Key" "$Val"
        fi
}

git_config_for_use()
{
        Func
        local Name=
        local Email=

        Name="$1" ; shift
        Email="$1" ; shift

        git_config_key_init user.name "$Name"
        git_config_key_init user.email "$Email"
        git_config_key_init color.status auto
        git_config_key_init color.status.staged green
        git_config_key_init color.status.unstaged red
#       git config_key_init color.status.untracked yellow
}

# shellcheck disable=2164 pushd ~ >/dev/null

_DIR=.git
_DIR=git

cd $HOME

[ ! -d bin/home-env/.git ] && echo "No $_DIR found in bin/set-home" && exit 1
ln -sf bin/home-env/.git
git_config_for_use "Bill" "bill@zglue.com"

git checkout .
mk_vimrc_color
cd bin
ln -sf clone klone

BASHRC=~/.bashrc

if ! grep bash_aliases $BASHRC >/dev/null ; then
        echo_dbg "Setting up bash aliases."
        # shellcheck disable=2129
        echo -e "\\nif [ -f ~/.bash_aliases ] ; then" >> $BASHRC
        echo -e "\\tsource ~/.bash_aliases" >> $BASHRC
        echo -e "fi\\n" >> $BASHRC
fi


if [ -e /sys/block/sdb ] ; then
        mkdir ~/.mnt
        sudo -H mount /dev/sdb1  ~/.mnt
        (
                cd ~ || die "No home dir found?"

        for entry in $(ls ~/.mnt) ; do
                [ ! -d "$entry" ] && continue
                [ "$entry" = "Documents" ] && continue
                ln -sf ".mnt/$entry"
        done
        )

#
# Update $FSTAB to make the mount permanent.
#
CMD=( "sed" "-i" "-e" '$a'"$BDRIVE'"  "$FSTAB" )
sudo "${CMD[@]}"

cd $HOME
if [ -f .mn/keys.rsa.tgz ] ; then
	tar -zxpf .mnt/keys.rsa.tgz
	mkdir tmp
	cd tmp
	tar -zxf ../.mnt/dot.config.tgz
	cp -a .config ../
fi
fi

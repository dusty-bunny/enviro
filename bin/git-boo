#!/bin/env python3
# pylint: disable=invalid-name

'''
    Initialize a git repo, set the config.name and
    config.email, and initialize .gitignore
'''

import posix
import subprocess
import sys


class BooRepoError(Exception):
    '''
        Duh.
    '''
    def __init__(self):
        super(BooRepoError, self).__init__()
        self.returncode = 5
        self.message = "Boo Boo on the Repo"


class BooInitError(Exception):
    '''
        Duh.
    '''
    def __init__(self):
        super(BooInitError, self).__init__()
        self.returncode = 4
        self.message = "Boo Boo on the git repo initialization."


class DoRun():
    '''
        Duh.
    '''
    def __init__(self):
        super(DoRun, self).__init__()
        self.keywords = dict()
        self.keywords["check"] = True
        self.keywords["capture_output"] = True

    def stuff(self):
        '''
            Duh.
        '''
        print("    Dummy public func", list(self.keywords))


class GitRepo():
    '''
        Represent the actions a git repo uses for initialization,
        configs, status, branching, working with remotes, push,
        fetch, pull, ... ?
    '''
    def __init__(self):
        '''
            Setup the command and config dictionaries with the
            basic elements common to different git commands.
        '''
        super(GitRepo, self).__init__()
        self.name = "Git"
        self.command = dict()
        self.command["init"] = ["git", "init"]
        self.command["config"] = ["git", "config"]
        self.command["show"] = [*self.command["config"], "--list", "--global"]
        self.config = dict()
        self.keywords = dict()
        self.keywords["check"] = True
        self.keywords["capture_output"] = True

    def do_run(self, *args):
        '''
            Duh.
        '''
        # print(f"::  do_run ({args})", args)
        # pylint: disable=subprocess-run-check
        try:
            phoo = subprocess.run(args, capture_output=True, check=True)
            return phoo
        except subprocess.CalledProcessError as e_e:
            print("    foo :: ", e_e.stderr, e_e.returncode)
            return None

    def config_setup(self, user, email):
        '''
            Duh.
        '''
        domain = "--global"
        entries = self.config_entries(domain)
        if entries is not None:
            if entries.get("user.name") == user and entries.get("user.email") == email:
                return

        self.command["user.name"] = user
        self.command["user.email"] = email
        self.config["name"] = [*self.command["config"], domain, "user.name", user]
        self.config["email"] = [*self.command["config"], domain, "user.email", email]
        self.do_run(*self.config["name"])
        self.do_run(*self.config["email"])

    def configuration(self):
        '''
            Duh.
        '''
        self.do_run(*self.command["show"])

    def config_entries(self, domain):
        '''
            Return the config entries as a dictonary. The specific config
            domain passed in must be one of:
            '--global', '--local', '--system'
        '''
        DOMAINS = ['--global', '--local', '--system']
        if domain not in DOMAINS:
            print("    Not a known domain", domain, DOMAINS)
            return None
        try:
            Proc = self.do_run(*self.command["show"])
            if len(Proc.stdout) == 0:
                return None
            return dict([x.split('=') for x in list(str(Proc.stdout).split('\\n')) if x != "'"])
        except subprocess.CalledProcessError as e_e:
            print("    Error text: ", Proc.stderr)
            return e_e.returncode

    def do_init(self):
        '''
            Duh.
        '''
        try:
            self.do_run(*self.command["init"])
            return True
        except subprocess.CalledProcessError as e_e:
            print("    cmd: ", e_e.cmd)
            print("    rval ", e_e.returncode)
            print("    stderr ", e_e.stderr)
            return False

    def init(self):
        '''
            Duh.
        '''
        def statobj(entry):
            posix.stat(entry)
        try:
            statobj(".git")
            print("    Repo already exists")
            return True
        except FileNotFoundError:
            print("    FileNotFoundError '.git'")
            print("    Creating .git repository ...")
            if self.do_init():
                return True
        print("    Failed to init git.")
        return False


REPO = GitRepo()
if not REPO:
    print("    Unable to acquire a repo object")
    sys.exit(1)

if not REPO.init():
    print("    Unable to initialize a git repository")
    sys.exit(1)

REPO.config_setup("Bill Hooper", "me@billrees.io")
REPO.configuration()

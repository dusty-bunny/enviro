#!/bin/env python3
# pylint: disable=invalid-name

'''
    Initialize a git repo, set the config.name and
    config.email, and initialize .gitignore
'''

import posix
import subprocess
import sys


class BooRepoError(Exception):
    '''
        Duh.
    '''
    def __init__(self):
        super(BooRepoError, self).__init__()
        self.returncode = 5
        self.message = "Boo Boo on the Repo"


class BooInitError(Exception):
    '''
        Duh.
    '''
    def __init__(self):
        super(BooInitError, self).__init__()
        self.returncode = 4
        self.message = "Boo Boo on the git repo initialization."


class DoRun():
    '''
        Duh.
    '''
    def __init__(self):
        super(DoRun, self).__init__()
        self.keywords = dict()
        self.keywords["check"] = True
        self.keywords["capture_output"] = True

    def do_exec(self, *args):
        '''
            Duh.
        '''
        print("number of args? ", len(args))
        # pylint: disable=subprocess-run-check
        subprocess.run(list(args), **self.keywords)

    def stuff(self):
        '''
            Duh.
        '''
        print("Dummy public func", list(self.keywords))


class GitRepo():
    '''
        Represent the actions a git repo uses for initialization,
        configs, status, branching, working with remotes, push,
        fetch, pull, ... ?
    '''
    def __init__(self):
        '''
            Setup the command and config dictionaries with the
            basic elements common to different git commands.
        '''
        super(GitRepo, self).__init__()
        self.name = "Git"
        self.command = dict()
        self.command["init"] = "git init"
        self.command["config"] = "git config --global"
        self.command["show"] = "git config --list"
        self.config = dict()
        self.keywords = dict()
        self.keywords["check"] = True
        self.keywords["capture_output"] = True

    def config_setup(self, user, email):
        '''
            Duh.
        '''
        entries = self.config_entries('--global')
        if entries is not None:
            if entries["user.name"] == user and entries["user.email"] == email:
                return

        self.config["name"] = " ".join([self.command["config"],
                                        "user.name", user])
        self.config["email"] = " ".join([self.command["config"],
                                         "user.email", email])
        # pylint: disable=subprocess-run-check
        subprocess.run(list(self.config["name"].split(' ')), check=True)
        subprocess.run(list(self.config["email"].split(' ')), check=True)

    def configuration(self):
        '''
            Duh.
        '''
        subprocess.run(list(self.command["show"].split(' ')), check=True)

    def __exec__(self, *args):
        '''
            Duh.
        '''
        # pylint: disable=subprocess-run-check
        phoo = subprocess.run(*args, **self.keywords)
        print("foo :: ", phoo.stdout)

    def config_entries(self, domain):
        '''
            Return the config entries as a dictonary. The specific config
            domain passed in must be one of:
            '--global', '--local', '--system'
        '''
        DOMAINS = list('--global', '--local', '--system')
        if domain not in DOMAINS:
            return False
        try:
            Proc = subprocess.run(list(self.command["show" + " " + domain]),
                                  check=True, capture_output=True)
            return dict([x.split('=') for x in list(str(Proc.stdout).split('\\n')) if x != "'"])
        except subprocess.CalledProcessError as e_e:
            print(e_e.stderr)
            return e_e.returncode

    def do_init(self):
        '''
            Duh.
        '''
        try:
            self.__exec__(self.command["init"].split(' '))
            return True
        except subprocess.CalledProcessError as e_e:
            print("cmd: ", e_e.cmd)
            print("rval ", e_e.returncode)
            print("stderr ", e_e.stderr)
            return False

    def init(self):
        '''
            Duh.
        '''
        def statobj(entry):
            posix.stat(entry)
        try:
            statobj(".git")
            print("Repo already exists")
            return True
        except FileNotFoundError:
            print("FileNotFoundError '.git'")
            if self.do_init():
                return True
        print("Failed to init git.")
        return False


REPO = GitRepo()
if not REPO:
    print("Unable to acquire a repo object")
    sys.exit(1)

if not REPO.init():
    print("Unable to initialize a git repository")
    sys.exit(1)

REPO.config_setup("Bill Hooper", "me@billrees.io")
REPO.configuration()

# >>> Phu = subprocess.run(['ls', '-a' ], check=True, capture_output=True)
# >>> Gah = dict([ x.split('=') for x in list(str(Phu.stdout).split('\\n'))
#                                       if x != "'"])
# >>> if Gah.get("user.name") == user
# >>> if Gah.get("user.email") == email
#

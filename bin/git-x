#!/bin/bash

[ "$TRACE" = "1" ] && set -x

POST_ACTION=()
DRY_RUN=${DRY_RUN:-0}
DEBUG=${DEBUG:-0}
VAR_LIST="LOOP_SET_COUNT count"
#
# How many lines to output before issuing a page break.
# May be altered with the '-p <#>' argument.
#
page_size=10
# shellcheck disable=2034 # count appears unused.
count=$page_size
declare -A GIT_MODE_CODE

dump_git_mode_codes()
{
        declare -A Foo=

        Foo="$1"
        declare -p $Foo
}

setup_mode_code()
{
        GIT_MODE_CODE["R"]="git mv"
        GIT_MODE_CODE["M"]="git add"
        GIT_MODE_CODE["A"]="git add"
        GIT_MODE_CODE["D"]="git rm"
        GIT_MODE_CODE["C"]="git add"
        GIT_MODE_CODE["??"]="echo Untracked: "
        GIT_MODE_CODE["U"]="git add"

        debug && dump_git_mode_codes GIT_MODE_CODE
}

Help()
{
        echo -e "$(basename "$0"):"
        Exec 'sed -n -e '\''/^# ARGS_Begin/,/^# ARGS_End/p'\' "$0" '| grep -v "^#" | grep ")"'
        echo -e ""
}

Exec()
{
        declare -a CMD=
        CMD=( "$@" )
        [ "$DRY_RUN"  = "1" ] && echo "${CMD[*]}"
        [ "$DRY_RUN" != "1" ] && eval "${CMD[@]}"

        return 0
}

debug()
{
        [ "$DEBUG" = "1" ] && return
        return 1
}

echo_dbg()
{
        debug || return
        echo -e "$*" >&2
}

dump_env()
{
        local Var=

        echo "Environment of $(basename "$0")"
        for Var in $VAR_LIST ; do
                echo -e "  $Var:\\t${!Var}"
        done
        echo ""
}

#
# Convert the contents in the args into git action. The
# first argument may be a flag to indicate whether the
# function should validate the initial directory mentioned
# in the path part of the $Line's contents.
#
stage_line()
{
        local tmp=
        local -a tmpa=
        local Key=

        #
        # Strip off the first character '( "${tmp[0]#?}" )',
        # which represents whether the file is staged or
        # not, and use the second character to see the
        # state of any un staged files.
        #
        # shellcheck disable=2206 #Quote to prevent word splitting, or split
                                  # robustly with mapfile or read -a
#       Key="$1"; shift
#       tmp="$1"
#       echo_dbg "target: ${tmp}  Key: $Key"
# ======
        tmpa=( $@ )
        Key="${tmpa[0]#?}"
        echo_dbg "Raw Key: ${tmpa[0]}  Key: $Key"
        tmp="${tmpa[1]}"
# ======
        #
        # This will run the command if $DEBUG != 1, else
        # it will print the command string through stderr.
        #
        [ -n "${GIT_MODE_CODE["$Key"]}" ] && Exec "${GIT_MODE_CODE[$Key]}" "${tmp}"
}

page_break()
{
        local tmpe=
        local Count=
        local Page_Size=
        local Page_Marker=

        Count="${1}"; shift
        Page_Size="${1}"; shift
        Page_Marker="$1"; shift
        if [ "${!Count}" -eq 0 ] ; then
                echo -e "$Page_Marker"
                eval "${Count}"="${!Page_Size}"
                sleep 1
                return
        fi
        tmpe=${!Count}
        eval "${Count}"=$(( tmpe - 1 ))
}

var_sanity_check()
{
        local Var=

        for Var in "$@" ; do
                [ -z "${!Var}" ] && echo "$Var has no value" >&2 && return 1
        done

        return 0
}

wait_rm_tmpfile()
{
        local File=

        [ -z "$1" ] && return 1

        File="$1"
        while [ ! -f "$File" ] ; do
                sleep 1
        done
        rm "$File"

        return
}


get_files()
{
        echo "/home/zglue/bin/astyle-nuttx"
}

set_helper()
{
        [ -z "$1" ] && return 1

        cat > "$1" <<"EOF"
#!/bin/bash

exec 1>&-
exec 2>&-
exec 0<&-
exec setsid $@
EOF
        [ -f "$1" ] && chmod +x "$1"
}

add_patch()
{
        [ ! -d .git ] && echo "No local .git/" >&2 && return 1

        local time_stamp=
        local PATCH_FILE=
        local branch=
        declare -A Info=
#
# Quoted this as per shellcheck.  Verify this still works!! XXX
#
        eval "Info=( $(git log -1 --format="[\"Hash\"]=\"%h\"       \
                                           [\"Author\"]=\"%an\"    \
                                           [\"Committer\"]=\"%cn\" \
                                           [\"Subject\"]=\"%f\"") )"
        branch="$(git branch | awk '{print $2}')"
        branch="$(git branch | awk '{print $2}' | tr -d [:space:])"
        time_stamp=$(date +"%Y-%a-%b-%e@%H.%M%P")
        # shellcheck disable=2116 # Useless echo? Instead of 'cmd $(echo foo)', just use 'cmd foo'.
        #                           In this case the $(echo ...) is extremely useful.  The echo
        #                           strips off all the white space preceding and following the
        #                           content that is needed.
        #
        # shellcheck disable=2086 # Double quote to prevent globbing and word splitting.
        #                           In fact globbing and splitting is what is necessary here
        #                           to ensure all of that extraneous white space is stripped.
        #
        PATCH_FILE="patches/patch.$(echo $branch | sed -e 's/\//_/g').${time_stamp}.${Info["Hash"]}"

        [ ! -d patches ] && mkdir -p patches
        git diff > "$PATCH_FILE"
        git diff --cached >> "$PATCH_FILE"
}

list_files()
{
        local Filter=

        Filter="${!1}"
        echo_dbg "Filter ($Filter) ($1)"

        [ -z "$(git status --porcelain)" ] && echo "Nothing to list." && return

        # shellcheck disable=2162 # read without -r will mangle backslashes.
        git status --porcelain | sed -e 's:^ :_:' \
                | grep "$Filter" \
                | awk '{print $1 "  " $NF}'
}


FILTER="^[A-Z_][A-Z]"
setup_mode_code

# ARGS_Begin
while [ $# -ne 0 ] ; do
        case $1 in
        -a) NEW_TIME_STAMP=$(date +"%a %b %d %T %Y %z")
            echo "NEW_TIME_STAMP:  ($NEW_TIME_STAMP)"
#           POST_ACTION=( "git" "commit" "--amend" "--date=${NEW_TIME_STAMP}" )
            POST_ACTION=( "git" "commit" "--amend" "--reset-author" )
            myname="$(git config --get user.name)"
            author=$(git log -1 --pretty=short | awk '/^Author:/ {print $2 " " $3}' )
            if [ "$myname" != "$author" ] ; then
                echo "Updating Author."
                POST_ACTION=( "${POST_ACTION[@]}" "--reset-author" )
                sleep 2
            fi
           ;;
        -c) POST_ACTION=( "git" "commit" )
           ;;
        -T) TOPIC=
           ;;
        -d) DEBUG=1; echo "DEBUG = $DEBUG"
           ;;
        -e) dump_env; exit 0
           ;;
        -h) Help; exit 0
           ;;
        #
        # List the files staged. 
        #
        -l) list_files FILTER && exit
           ;;
        -L) git review -l; exit
           ;;
        -n) DRY_RUN=1; echo "DRY_RUN = $DRY_RUN"
           ;;
        -P) page_size=$2; echo "page size: $page_size"
            shift
           ;;
        #
        # Push to the configured repo defined by the name "origin"
        #
        -p|--push) PUSH="push"
           ;;
        #
        # Push to gerrit as a draft and remove
        # the branch supplying to change set.
        #
        -R) PUSH="review -D -f"
           ;;
        -r|--rebase) git stash save "====" && git pull --rebase && git stash pop && exit
                echo "Failed somewhere along stash, pull (rebase), and pop." >&2
                exit 1
           ;;
        -t) NEW_TIME_STAMP=$(date +"%a %b %d %T %Y %z")
            echo "NEW_TIME_STAMP:  ($NEW_TIME_STAMP)"
            POST_ACTION=( "git" "commit" "--amend" "--date=${NEW_TIME_STAMP}" "--no-verify" )
            myname="$(git config --get user.name)"
            author=$(git log -1 --pretty=short | awk '/^Author:/ {print $2 " " $3}' )
            if [ "$myname" != "$author" ] ; then
                echo "Updating Author."
                POST_ACTION=( "${POST_ACTION[@]}" "--reset-author" )
                sleep 2
            fi
           ;;
        -u) UNTRACK=1
           echo_dbg "UNTRACK set: <$UNTRACK>"
           ;;
        --vim) vim $(list_files FILTER | awk '{print $NF}') ; exit 0
           ;;
        *) echo "Unknown argument: $1"; Help; exit 0
           ;;
        esac
        shift
done
# ARGS_End"

if [ -n "$UNTRACK" ] && [ "$UNTRACK" -eq 1 ] ; then
        GIT_MODE_CODE["??"]="git add"
        echo_dbg "Resetting the FILTER ..."
        FILTER="^[A-Z_?][A-Z?]"
fi

[ -z "$PUSH" ] || POST_ACTION=( "eval" "git" "commit" "&&" "git" "$PUSH" )

if ! var_sanity_check page_size ; then
        echo "page_size has a bad value: ($page_size)" >&2
        exit 1
fi

(
        Dir="$(git rev-parse --show-toplevel)" || exit 1
        echo_dbg "cd to $Dir"
        cd "$Dir" || exit 1
        #
        # Make a copy of the diffs --cached so a rough history is
        # maintained of all of the amended action here.
        if [ "${POST_ACTION[2]}" = "--amend" ] ; then
                add_patch
        fi

        list_files FILTER | while read key file ; do
                        if ! RESULTS="$(stage_line "$key" "$file") $RESULTS" ; then
                                echo "Did not stage: [$line]"
                        fi
                        page_break count page_size "\\t======================================="
                done
        echo "== ${POST_ACTION[@]}"

        "${POST_ACTION[@]}"
        [  "${#POST_ACTION[@]}" -eq 0 ] && git status
        if [ -L "$Dir"/.git ] ; then
                echo "Syncing a backing git tree."
                DirPath=$(ls -l "$Dir"/.git | awk '{print $NF}')
                Dir=$(dirname $DirPath)
                cd $Dir && git checkout .
        fi
)


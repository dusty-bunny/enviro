#!/bin/bash

ASTYLE_CO="svn checkout https://svn.code.sf.net/p/astyle/code/trunk astyle-code"
# ZGLUE_BILL_HOST=git@$GITHUB/zglue-bill
GIT_UNAME=bill
GERRIT_HOST=101.132.142.37
GERRIT_SSH_PORT=30149
GERRIT_HTTP_PORT=14586
GERRIT_HOST_URL="$GIT_UNAME@$GERRIT_HOST:$GERRIT_SSH_PORT"
GITHUB=github.com
GITGITHUB=git@github.com
GITHUB_HTTPS="https://github.com"
GITHUB_SSH="ssh://github.com"
BITBUCKET_URL="https://bitbucket.org"
SDK_13="SDK_13.0.0-1"
SDK_13_1="SDK_13.1.0"
SDK_14="SDK_14.0.0"
DIALOG_SDK=dialog_585_sdk_dev
NORDIC_SDK="$SDK_13_1"
SRC_REPO_URL="$GERRIT_HOST_URL"
REDORCA_HOST=git@$GITHUB/redorca

declare -A OfferRepos
declare -A Repo2Host
declare -A RepoRename
declare -A CONFIGS
declare -A svn_backed
declare -A FinalCmds
declare -A Options

Options["astyle"]="--use-log-author"

DOXYGEN="1.18.14"
OfferRepos["NuttX"]="Official repo for Nuttx rtos on branch master"
OfferRepos["AppsX"]="Official repo for Nuttx apps on branch master"
OfferRepos["DocsX"]="Official repo for Nuttx Documentation on branch master"
OfferRepos["nuttx"]="zGlue repo for nuttx rtos on branch zdk"
OfferRepos["apps"]="zGlue repo on nuttx_apps on branch zdk"
OfferRepos["nuttx_apps"]="zGlue repo for nuttx_apps on branch zdk"
OfferRepos["tools"]="Official repo for Nuttx tools, branch master"
OfferRepos["fast"]="zGlue repo for fast_api repo branch fast_api_dev".
OfferRepos["auto_test"]="zGlue repo for auto_test tools on Gerrit branch=master."
OfferRepos["dialog"]="zGlue repo for Dialog sdk  branch $DIALOG_SDK"
OfferRepos["nordic"]="zGlue repo for Nordic sdk branch $NORDIC_SDK" 
OfferRepos["Doxygen"]="zGlue repo for Doxygen branch $DOXYGEN" 
OfferRepos["upgrade"]="zGlue-bill's repo for moving to nuttx TOT." 
OfferRepos["external"]="3rd party code to build into the tree." 

#
# Repos which are svn based are added here along with the command
# required to "clone" them.
#
svn_backed["astyle-code"]="svn checkout"
svn_backed["xpra"]="svn checkout"
svn_backed["FreeImage-svn"]="svn checkout"
svn_backed["Moritz"]="svn checkout"
svn_backed["codeblocks"]="svn checkout"
svn_backed["kitty"]="svn checkout"

#
# Hash to match informal repo names to the canonical ones.
#
# RepoRename["freeimage"]="FreeImage-git"
RepoRename["e17"]="enlightenment"
RepoRename["blocks"]="codeblocks"
RepoRename["upgrade"]="nuttx-upgrade"
RepoRename["repo"]="git-repo"
RepoRename["astyle"]="astyle-code"
RepoRename["review"]="git-review"
RepoRename["mynewt"]="mynewt-core"
RepoRename["nimble"]="NimBLE"
RepoRename["fast"]="fast_api"
RepoRename["NuttX"]="bknuttx"
RepoRename["AppsX"]="bkapps"
RepoRename["DocsX"]="bkdocsx"
RepoRename["BoardsX"]="bkboardsx"
RepoRename["tools"]="bktools"
RepoRename["riot"]="RIOT"
RepoRename["apps"]="nuttx_apps"
RepoRename["pygit"]="dulwich"
RepoRename["mynuttx"]="nuttxr"
RepoRename["myapps"]="appsx"
RepoRename["myastyle"]="astyle-github"

# Setup in setup_repo_table() ## RepoRename["dialog"]="dialog_585_sdk_dev@3rd_Party_SDK"
# Setup in setup_repo_table() ## RepoRename["dallas"]="dialog_585_sdk_dev@3rd_Party_SDK"
# Setup in setup_repo_table() ## RepoRename["nordic"]="#$NORDIC_SDK"@3rd_Party_SDK"
# Setup in setup_repo_table() ## RepoRename["sdk_13_1"]="SDK_13.1.0@3rd_Party_SDK"
# Setup in setup_repo_table() ## RepoRename["sdk_14"]="SDK_14.0.0@3rd_Party_SDK"
RepoRename["bme280"]="BME280_driver"
RepoRename["bmi160"]="BMI160_driver"
RepoRename["bmm050"]="BMM050_driver"
RepoRename["notepad"]="notepad-plus-plus"
RepoRename["Doxygen"]="doxygen"
RepoRename["ctags"]="universal-ctags"
RepoRename["sumatra"]="sumatrapdf"
RepoRename["requests"]="python-requests"

Repo2Host["git"]="master@$GITGITHUB/git/git.git"
Repo2Host["workers"]="master@$GITHUB_HTTPS/Pinterest/service-workers"
Repo2Host["enlightenment"]="master@$GITHUB_HTTPS/Enlightenment/enlightenment.git"
Repo2Host["aptly"]="master@$GITHUB_HTTPS/aptly-dev/aptly.git"
Repo2Host["urllib3"]="master@$GITGITHUB/redorca/urllib3.git"
Repo2Host["python-requests"]="master@$GITGITHUB/psf/requests.git"
Repo2Host["click"]="master@$GITHUB_HTTPS/pallets/click.git"
Repo2Host["dh-golang"]="master@$GITHUB_HTTPS/Debian/dh-make-golang.git"
Repo2Host["x-sdk"]="zdk@$GITGITHUB/redorca/external.git"
Repo2Host["phusion"]="master@$GITHUB_HTTPS/phusion/debian-packaging-for-the-modern-developer.git"
Repo2Host["geniso"]="master@$GITGITHUB/Distrotech/cdrkit.git"
Repo2Host["chibios"]="https://svn.code.sf.net/p/chibios/svn2/trunk"
Repo2Host["chromium"]="$GITHUB_HTTPS/chromium/chromium.git"
Repo2Host["alias"]="master@$GITHUB_HTTPS/bjoernkarmann/project_alias"
Repo2Host["sumatrapdf"]="master@$GITHUB_HTTPS/sumatrapdfreader/sumatrapdf.git"
Repo2Host["gitty"]="master@$GITHUB_HTTPS/cyd01/KiTTY.git"
Repo2Host["kitty"]="http://svn.9bis.com/sandbox/kitty/trunk/ kitty"
#
# Hash translation from canonical repo target to  URI crafted to
# hold enough info to clone/checkout the source.
#
Repo2Host["kakoune"]="master@$GITHUB_HTTPS/mawww/kakoune.git"
Repo2Host["camelot"]="master@$GITHUB_HTTPS/socialcopsdev/camelot"
Repo2Host["atom"]="master@$GITHUB_HTTPS/atom/atom.git"
Repo2Host["upython-lib"]="master@$GITHUB_HTTPS/micropython/micropython-lib.git"
Repo2Host["upython"]="master@$GITHUB_HTTPS/micropython/micropython.git"
Repo2Host["codeblocks"]="svn://svn.code.sf.net/p/codeblocks/code/trunk codeblocks"
Repo2Host["scikit"]="master@$GITHUB_HTTPS/scikit-learn/scikit-learn.git"
Repo2Host["uncrustify"]="master@$GITHUB_HTTPS/uncrustify/uncrustify.git"
Repo2Host["alios"]="master@$GITGITHUB/alibaba/AliOS-Things.git"
Repo2Host["utags"]="master@$GITGITHUB/universal-ctags/ctags.git"
Repo2Host["webdox"]="master@$ZGLUE_BILL_HOST/zglue-bill.github.io.git"
Repo2Host["zdkdox"]="master@$GITGITHUB/zglue/zglue_doc.git"
Repo2Host["cmake"]="master@https://gitlab.kitware.com/cmake/cmake.git"
Repo2Host["spresence"]="master@$GITHUB_HTTPS/sonydevworld/spresense.git"
Repo2Host["nuttx-upgrade"]="master@$ZGLUE_BILL_HOST/nuttx-upgrade.git"
Repo2Host["notepad-plus-plus"]="master@$GITHUB_HTTPS/notepad-plus-plus/notepad-plus-plus.git"
Repo2Host["mbed-os"]="master@$GITGITHUB/ARMmbed/mbed-os.git"
Repo2Host["qemu"]="master@git://git.qemu.org/qemu.git"
Repo2Host["oclint"]="master@$GITGITHUB/oclint/oclint.git"
Repo2Host["tinyara"]="master@$GITGITHUB/Samsung/TinyAra.git"
Repo2Host["tizen"]="master@$GITGITHUB/Samsung/TizenRT.git"
Repo2Host["blah"]="z@$ZGLUE_BILL_HOST/blah.git"
Repo2Host["blah_apps"]="zapps@$ZGLUE_BILL_HOST/blah_apps.git"
Repo2Host["texworks"]="master@$GITGITGITHUB/Texworks/texworks.git,manual.git,website.git"
Repo2Host["mynewt-core"]="master@$GITGITHUB/apache/mynewt-core.git"
Repo2Host["NimBLE"]="master@$GITGITHUB/apache/mynewt-nimble.git"
Repo2Host["micro-ecc"]="master@$GITGITHUB/kmackay/micro-ecc.git"
Repo2Host["zephyr"]="master@$GITGITHUB/zephyrproject-rtos/zephyr.git"
Repo2Host["RIOT"]="master@$GITHUB/RIOT-OS"
Repo2Host["bknuttx"]="master@${BITBUCKET_URL}/nuttx/nuttx.git"
Repo2Host["bktools"]="master@${BITBUCKET_URL}/nuttx/tools.git"
Repo2Host["bkdocsx"]="master@${BITBUCKET_URL}/nuttx/Documentation.git"
Repo2Host["bkboardsx"]="master@${BITBUCKET_URL}/nuttx/boards.git"
Repo2Host["bkapps"]="master@${BITBUCKET_URL}/nuttx/apps.git"
Repo2Host["fw_devtools"]="master@$ZGLUE_BILL_HOST/fw_devtools.git"
Repo2Host["home-env"]="master@$REDORCA_HOST/home-env.git"
Repo2Host["nuttxr"]="master@$REDORCA_HOST/nuttxr.git"
Repo2Host["appsx"]="master@$REDORCA_HOST/appsx.git"
Repo2Host["astyle-github"]="master@$REDORCA_HOST/astyle-github.git"
Repo2Host["sdk-pkgs"]="master@$REDORCA_HOST/sdk-pkgs.git"
Repo2Host["nuttx-local"]="zdk@$ZGLUE_BILL_HOST/nuttx-local.git"
Repo2Host["apps-local"]="zdk@$ZGLUE_BILL_HOST/apps-local.git"
# Repo2Host["linux"]="master@git@$GITHUB/torvalds/linux.git"
Repo2Host["linux"]="master@$GITHUB_HTTPS/torvalds/linux.git"
# Repo2Host["git-review"]="master@$GITHUB_HTTPS/openstack-infra/git-review.git"
Repo2Host["git-review"]="master@https://opendev.org/opendev/git-review"
Repo2Host["poppler"]="master@https://anongit.freedesktop.org/git/poppler/poppler.git"
Repo2Host["xpra"]="https://www.xpra.org/svn/Xpra/trunk xpra"
Repo2Host["astyle-code"]="https://svn.code.sf.net/p/astyle/code/trunk astyle-code"
Repo2Host["FreeImage-svn"]="https://svn.code.sf.net/p/freeimage/svn/ freeimage-svn"
Repo2Host["Moritz"]="https://svn.code.sf.net/p/moritz/Archive_SVN/ moritz-Archive_SVN"
# Repo2Host["FreeImage-git"]="master@https://git.code.sf.net/p/freeimage/git freeimage-git"
Repo2Host["git-repo"]="master@https://gerrit.googlesource.com/git-repo.git"
Repo2Host["BMI160_driver"]="master@$GITHUB_HTTPS/BoschSensortec/BMI160_driver.git"
Repo2Host["BME280_driver"]="master@$GITHUB_HTTPS/BoschSensortec/BME280_driver.git"
Repo2Host["BMM050_driver"]="master@$GITHUB_HTTPS/BoschSensortec/BMM050_driver.git"
Repo2Host["doxygen"]="master@$GITHUB_HTTPS/doxygen/doxygen.git"
Repo2Host["pandoc"]="master@$GITGITHUB/jgm/pandoc.git"
Repo2Host["universal-ctags"]="master@$GITHUB_HTTPS/universal-ctags/ctags.git"
Repo2Host["eigen"]="master@${BITBUCKET_URL}/eigen/eigen.git"
Repo2Host["build-webos"]="master@$GITGITHUB/webosose/build-webos.git"
Repo2Host["bitbake"]="master@git://git.openembedded.org/bitbake.git"
Repo2Host["dulwich"]="master@$GITHUB_HTTPS/dulwich/dulwich.git"
Repo2Host["searchmonkey"]="master@https://git.code.sf.net/p/searchmonkey/GTK searchmonkey-GTK"
Repo2Host["ksearchmonkey"]="master@https://git.code.sf.net/p/searchmonkey/KDE searchmonkey-KDE"
Repo2Host["repogen"]="master@$GITHUB_HTTPS/geek1011/repogen.git"
Repo2Host["damn-repogen"]="master@$ZGLUE_BILL_HOST/damn-repogen.git"

FinalCmds=()
FinalCmds["nuttx"]="setup_repo"
FinalCmds["apps"]="setup_repo"
FinalCmds["nuttx_apps"]="setup_repo"
FinalCmds["fast_api"]="setup_repo"
FinalCmds["auto_test"]="setup_repo"
#
# Table of color codes for vt100.  To be imported
# into any shell script wanting to display color
#

#
#
# Simple color names are setting the forground color.
#
# Weird names are setting the forground to the first
# part of the name and the background to the second.
#
# E.G.  REDBLK == Red lettering on a black background
#       regardless of terminal settings.
#
# E.G.  YLWLtBLU == Yellow lettering on a light blue background.
#
# shellcheck disable=2034
RED='\033[1;31m'
# shellcheck disable=2034
REDBLK='\033[1;31;40m'
# shellcheck disable=2034
REDYLW='\033[1;31;43m'
# shellcheck disable=2034
REDBLU='\033[1;31;46m'
# shellcheck disable=2034
GREEN='\033[1;32m'
# shellcheck disable=2034
GRNBLK='\033[1;32;40m'
# shellcheck disable=2034
GRNGRN='\033[1;32;42m'
# shellcheck disable=2034
YELLOW='\033[1;33m'
# shellcheck disable=2034
YLWBLK='\033[1;33;40m'
# shellcheck disable=2034
YLWRED='\033[1;33;41m'
# shellcheck disable=2034
YLWGRN='\033[1;33;42m'
# shellcheck disable=2034
YLWBLU='\033[1;33;44m'
# shellcheck disable=2034
YLWltBLU='\033[1;33;46m'
# shellcheck disable=2034
BLUE='\033[1;34m'
# shellcheck disable=2034
RESET='\033[0;39;49m'

CURRENT_FUNC=

err_echo()
{
        echo -e "$@${RESET}" >&2
}

dbg_echo()
{
        local Offset=

        debug || return 0

        [ "${FUNCNAME[1]}" = "$CURRENT_FUNC" ] && Offset='\t'
#       CURRENT_FUNC="${FUNCNAME[1]}"
        err_echo "$Offset" "$@"
}

#
# Wrap the usual error exit pattern.
do-exit()
{
        local ErrCode=
        local ErrMsg=

        ErrCode="$1"; shift
        ErrMsg="$@"

        err_echo "$ErrMsg"

        exit $ErrCode
}

#
# Print the name of the function and how deeply nested.
#
Func()
{
        CURRENT_FUNC="${FUNCNAME[1]}"
        dbg_echo "${#FUNCNAME[@]} : ${FUNCNAME[1]}( $@ )"
}

#
# Returns true if TRACE=1.  I.E. "trace && set -x" will set the '-x'
# shell option forcing the script to run in tracing mode.
#
trace()
{
        set +x
        [ "$TRACE" = "1" ] || return 1
        set -x
        return  0
}

#
# Provide an in-line check for debug status to conditionally enable calls.
# e.g. debug && echo "This is a test" will only fire if DEBUG=1 otherwise
#      it is a no-op.
#
#
debug()
{
        [ "$DEBUG" = "1" ] && return 0
        return 1
}

#
# Setup the repo table with a repo host url
#
setup_repo_table()
{
        Func $@
        local repo_host_url=

        [ -z "$1" ] && dbg_echo "No repo provided." && return 1
        repo_host_url="$1"; shift
        dbg_echo "repo_host_url ($repo_host_url)"
	Repo2Host["fast_api"]=fast_api_dev@$repo_host_url/fast_api
	Repo2Host["sdk_13"]=$SDK_13@$repo_host_url/3rd_Party_SDK
	Repo2Host["sdk_14"]=$SDK_14@$repo_host_url/3rd_Party_SDK
	Repo2Host["nordic"]=$NORDIC_SDK@$repo_host_url/3rd_Party_SDK
	Repo2Host["dialog"]=$DIALOG_SDK@$repo_host_url/3rd_Party_SDK
	Repo2Host["nuttx725"]=nuttx-7.25-merge@$repo_host_url/nuttx.git
	Repo2Host["nuttx"]=zdk@$repo_host_url/nuttx.git
	Repo2Host["nuttx-ext"]=zdk@$repo_host_url/nuttx.git,zdk@$repo_host_url/external.git,zdk@$repo_host_url/nuttx_apps.git
	Repo2Host["nuttx_apps"]=zdk@$repo_host_url/nuttx_apps.git
#	Repo2Host["apps"]=zdk@$repo_host_url/nuttx_apps.git
	Repo2Host["apps725"]=nuttx-7.25-merge@$repo_host_url/nuttx_apps.git
	Repo2Host["apps"]="${Repo2Host["nuttx_apps"]}"
	Repo2Host["external"]=zdk@$repo_host_url/external.git
	Repo2Host["auto_test"]=master@$repo_host_url/auto_test.git
	Repo2Host["3rd_Party_SDK"]=dialog_585_sdk_dev@$repo_host_url/3rd_Party_SDK.git
}

#
#
#
dump_Repo2Host()
{
        Func $@
        err_echo  "\tRepo names to clone and their repo urls"
        err_echo  "\tFormat of repo url:  branch@name@url/x.git"
        for key in ${!Repo2Host[@]} ; do
                err_echo -n "Repo: ${YELLOW}$key\t"
                [ "${#key}" -le 9 ] && err_echo -n "\t"
                err_echo "${BLUE}${Repo2Host[$key]}${RESET}"
        done
        err_echo -e "\t\tAliases"
        for key in ${!RepoRename[@]} ; do
                for="${RepoRename[$key]}"
                err_echo -e "alias: ${BLUE}$key\t\t${RED}${for#*@}${RESET}"
        done
}

dump_OfferRepos()
{
        Func $@

        err_echo "\t${YLWGRN}\tRepos supported"
        err_echo "\t${YLWGRN}\t               "
        err_echo "\t${YLWGRN}Repo:\t\t\tDescription"
        err_echo "\t${YLWGRN}     \t\t\t           "
        for key in ${!OfferRepos[@]} ; do
                err_echo -n "      ${YEllOW}$key\t"
                [ "${#key}" -le 9 ] && err_echo -n -e "\t"
                err_echo "${BLUE}${OfferRepos[$key]}"
        done
}

dump_targets()
{
        Func $@

        for target in ${TARGETS[@]} ; do
                err_echo "\ttarget\t$target"
        done
}

#
# Quick writeup of what keywords map to what repos.
#
info()
{
        Func $@
        err_echo "\tKeyword\t\tRepo\t\tBranch"
        err_echo "\t3rd_Party_SDK\t3rd_Party_SDK :: master"
        err_echo "\tnordic\t\t3rd_Party_SDK :: SDK_13.1.0"
        err_echo "\tsdk_13_1\t3rd_Party_SDK :: SDK_13.1.0"
        err_echo "\tsdk_13\t\t3rd_Party_SDK :: SDK_13.0.0-1"
        err_echo "\tsdk_14\t\t3rd_Party_SDK :: SDK_14.0.0"
        err_echo ""
        err_echo "\tdallas\t\t3rd_Party_SDK :: dialog_585_sdk_dev"
        err_echo ""
        err_echo -e "\tapps\t\tnuttx_apps :: zdk"
        err_echo -e "\tnuttx_apps\tnuttx_apps :: zdk"
        err_echo -e "\tnuttx\t\tnuttx :: zdk"
        err_echo -e "\tbknuttx\t\toffcial nuttx :: master"
        err_echo -e "\tauto_test\tauto_test :: master"
}

#
# Fill in the GERRIT_* variables using the current repo's info.
#
setup_GERRIT_vars()
{
        Func $@
#       GERRIT_UNAME="$(git config --local gitreview.username)"
        GERRIT_UNAME="$(git config --global user.name)"
        GERRIT_HOST="$(git config --local gitreview.host)"
}

#
# Perform any setup for this repo such as config settings,
# adding remotes, renaming remotes.
#
# Arg1 : The repo to configure
# Arg2 : The branch involved (may not be used)
#
setup_repo()
{
        Func $@
        local Repo=
        local tmp=

        [ ! -d "$1" ] && err_echo "No directory specified to setup." && return 1
        Repo="$1"
    (
        cd "$Repo" || return 1
        git config --local pull.rebase true
        gitrev-setup.sh
    )
}

#
# Setup remotes so that one points to gerrit and the other
# points to git-hub.  The idea is to develop with git-hub
# updating along the way from gerrit, and then push to gerrit
# when ready.
#
# reset_remotes()
# {
# }

#
# Given a user/branch/host/repo tuple break it apart
# and output back to the caller over stdout.
#
break_apart()
{
        Func $@
        local Branch=

        Branch="$@"

        # The branch name
        echo -n "${Branch%%@*}"
        echo -n "  "
        # The uri pointing to the repo
        echo -e -n "${Repo2Host[$Key]#*@}\t"

        # The repo directory
        echo    "${Repo2Host[$Key]##*/}"
}

#
# Given a repo id figure out the branch and url to clone
#
get_info()
{
        Func $@
        local Key=
        local Branch=


        [ -z "$1" ] && return 1
        Key=${1%%.git}
        dbg_echo -n "Key: (${Key})\t"
        if [ "${Key}" = "astyle" ] ; then
                $ASTYLE_CO
                return
        fi
        if [ "${Key%%@*}" != "${Key}" ] ; then
                Branch=${Key##@*}
        else
                Branch=${Repo2Host[$Key]}
                dbg_echo "Repo2Host[$Key] : <$Branch>"
        fi
        [ -z "$Branch" ] && err_echo "No repo info found." && return 1
        dbg_echo "Branch: <$Branch>"
        break_apart "$Branch"
}

#
# Check RepoRename[] for any translation of the target repo
# provided on the cli.
#
resolve_clone_id()
{
        Func $@
        local Target=

        Target="$1"
        ALTNAME=${RepoRename[$Target]}
        if [ -n "$ALTNAME" ] ; then
                echo "$ALTNAME"
        else
                echo "$Target"
        fi
}

#
# Assemble the complete git command for cloning
#
set_cmd_git()
{
        Func $@
        local target=
        local Proto=
        local URL=1
        local ActiveBranch=

        declare -a Info=

        target="$1"
        if ! Info=( $(get_info $target) ) ; then
                err_echo "Repo not found <$target>"
                return 1
        fi
        dbg_echo "Info: [ ${Info[*]} ]"

        Proto=ssh
        Uri=${Info[$URL]}
        tmp="${Uri#*://}"
        dbg_echo "Uri: <$Uri>, tmp <$tmp>"

        [ "$tmp" != "${Uri}" ] && Proto="${Uri%://*}"
        Uri="${Uri#*://}"
        [ -z "$Proto" ] && Proto=ssh
        [ -n "$ALT_BRANCH" ] && ActiveBranch="$ALT_BRANCH"
        [ -z "$ActiveBranch" ] && ActiveBranch=${Info[$Branch]%%@*}
        dbg_echo "Active branch: <$ActiveBranch>, Branch: <$Branch>, Info[Branch] <${Info[$Branch]}>"
        dbg_echo "Uri: <$Uri>,  Element count: ${#Info[@]}"
#       echo "git clone -b "${Info[$Branch]}" $Proto://$Uri"
        BRANCH=( "-b" "$ActiveBranch" )
        [ -z "$ActiveBranch" ] && BRANCH=()
        echo "git clone "${BRANCH[@]}" $Proto://$Uri"
}

#
# Given a keyword or hint from the user find the branch,
# repo, and URI associated and clone.
#
clone_one()
{
        Func $@
        local CMD=
        local TrueTarget=

        [ -z "$1" ] && return 1
        TrueTarget="$(resolve_clone_id $1)"
        dbg_echo "Target to clone: $TrueTarget"
        dbg_echo ":: svn_backed[$TrueTarget] == ${svn_backed[$TrueTarget]}"
        if [ -n "${svn_backed[$TrueTarget]}" ] ; then
                dbg_echo "svn_backed[$TrueTarget] == ${svn_backed[$TrueTarget]}"
                CMD="${svn_backed[$TrueTarget]} ${Repo2Host[$TrueTarget]}"
        elif [ -n "${hg_backed[$TrueTarget]}" ] ; then
                dbg_echo  "hg_backed[$TrueTarget] == ${hg_backed[$TrueTarget]}"
                dbg_echo  "hg_backed[fast_api] == ${hg_backed[fast_api]}"
                CMD="${hg_backed[$TrueTarget]} ${Repo2Host[$TrueTarget]}"
        else
                dbg_echo  "Repo2Host[$TrueTarget] == ${Repo2Host[$TrueTarget]}"
                CMD="$(set_cmd_git $TrueTarget)"
        fi

        #
        # Setup message to output for success.
        #
        if [ "${CMD:0:3}" = "git" ] ; then
                MSG="Cloned:"
        elif [ "${CMD:0:3}" = "svn" ] ; then
                MSG="Checked out:"
        elif [ "${CMD:0:2}" = "hg" ] ; then
                MSG="Checked out:"
        fi

        if [ "$FORCE_CLONE" = "yes" ] ;then
                ChkDir="${CMD##*/}"
                [ -d "${ChkDir%.git}" ] && dbg_echo "Forcing a clone ..." && rm -rf "${ChkDir%.git}"
        fi

        dbg_echo "$CMD"
        if ! $CMD ; then
                err_echo "Not cloned."
                return 1
        fi
        [ -n "$MSG" ] && dbg_echo "== ${MSG} $TrueTarget"

        dbg_echo "=== TrueTarget: $TrueTarget,  Final Cmd : ${FinalCmds[${TrueTarget%.git}]}"
        CMD="${FinalCmds["${TrueTarget%.git}"]}"
        [ -z "${CMD}" ] && dbg_echo "No post command to run" && return 0
        CMD="$CMD ${TrueTarget%.git}"
        dbg_echo "Post Command: <$CMD>"
        $CMD
}

clone()
{
        Func $@
        [ -z "$1" ] && return 1

        local Target=
        local cell_line=
        local Key=

        for Target in $@ ; do
                dbg_echo "Clone target ${Target%%.git}"
                Key=${Target%%.git}

                if ! clone_one "$Target" ; then
                        err_echo "Not cloned: [$Target]"
                        exit 5
                fi
        done
}

dual_source_repos()
{
        Func $@
        git remote rename origin gerrit
        git remote add github ssh://$ZGLUE_BILL_HOST
}

hhelp()
{
        Func $@
        sed    -e '1,/^#Help/d' -e '/^#Help/,$d' "$0" | \
                        sed -n -e '/^[ 	]\+[^A-Za-z0-9+=);_-]\+#/p' -e '/)/p'
}

set_dir_aside()
{
        Func $@
        local CUR_DIR

        CUR_DIR="$1"
        mv "$CUR_DIR" ".${CUR_DIR}"
}

make_a_dir()
{
        Func $@
        local Dir=

        [ -z "$1" ] && return 1

        Dir="$1"
        [ -d $Dir ] && set_dir_aside $Dir
        mkdir -p $Dir
}

help()
{
        Func $@
        cat <<  EOF 
    $(basename $0) : [h]  [-d <dir>] [ -c <repo1 ... > ]
EOF
        cat << "EOF"
        -c :    Clone.  Clone from a repo specified by the arguments
                The flag must be the last flag and immediately precede
                the list and of repos.
        -d :    Create a new parent directory of the cloned repos. If the
                directory already exists then it will be set aside and a
                new directory created.
        -h :    Print this text to stdout.
        -l :    Print the list of repos available to clone.
EOF
}

parse_cli()
{
        Func $@

        dbg_echo "\$# $#"
        while [ $# -ne 0 ] ; do
                dbg_echo "\$1 == ($1)"
                case "$1" in
                 -b|--branch) ALT_BRANCH="$2" ; shift
                        dbg_echo "ALT_BRANCH set to <$ALT_BRANCH>"
                ;;
                 -c)   shift ; TARGETS=( $@ )
                        dbg_echo "Target based on $@"
                        shift ${#TARGETS[@]}
                        dbg_echo "\$# = $#, shifted ${#TARGETS[@]}, Target(s): ${TARGETS[*]}"
                ;;
                 -d)   [ -n "$2" ] && dbg_echo "Found a \$2: $2"
                        if ! make_a_dir "$2" ; then
                                err_echo "Unable to create directory path $2"
                                exit 1
                        fi
                        PARENT_DIR="$2" ; shift
                        dbg_echo "PARENT_DIR set to $PARENT_DIR"
                ;;
                 -h)   help && exit
                ;;
                 -hh)  hhelp && exit
                ;;
                 -l)   [ "$(basename $0)" != "clone" ] && dump_Repo2Host && exit
                        dump_OfferRepos && exit
                ;;
        # Rename origin to something else.
                -O | --no-origin)
                        CONFIG_TWO_REPOS="dual_source_repo" # TBD
                ;;
                -p | --print) dump_Repo2Host && exit 0
                ;;
                   #
                   # output the url for the provided repo reference name.
                -P | --PRINT) dbg_echo "Print repo $2"
                              [ -z "${Repo2Host[$2]}" ] && do-exit 5 "No such repo found: $2."
                              echo -e "\t$2 :: ${Repo2Host[$2]}" && do-exit 0 ""
                ;;
        # set a particular url to clone the desired repo from.
                -R | --repo) SRC_REPO_URL="$2"; shift # set the repo to init with.
                ;;
                *)
                        if [ "$(basename $0)" = "klone" ] ; then
                                klone_parse "$1"
                        elif [ -z "${OfferRepos[$1]}" ] ; then
                                err_echo "Not a supported repo: $1 but, clone anyway."
#                               exit
#                       else
                                dbg_echo "Adding target $1 to TARGETS"
                                TARGETS[${#TARGETS[@]}]="$1"; # The repo name to clone.
                        fi
                ;;
                esac
                shift
        done
  dbg_echo done
}

klone_parse()
{
        Func $@

#Help
	while [ $# -ne 0 ] ; do
	        case "$1" in
	        -f|--force) FORCE_CLONE="yes"
	                    echo "Force clone set: <$FORCE_CLONE>"
	                ;;
	        # Rename origin to something else.
	        -O | --no-origin)
	                     CONFIG_TWO_REPOS="dual_source_repo" # TBD
	                ;;
	        -p | --print) dump_Repo2Host && exit 0
	                ;;
	        # set a particular url to clone the desired repo from.
	        -R | --repo ) SRC_REPO_URL="$2"; shift # set the repo to init with.
	                ;;
	        *) TARGETS[${#TARGETS[@]}]="$1"; # The repo name to clone.
	                [ -z "$1" ] && help && exit
	                ;;
	        esac
	        shift
	done
#Help
}
Func $@
#
# Repos which are svn based are added here along with the command
# required to "clone" them.
#
hg_backed["eigen"]="hg klone"
hg_backed["fast_Api"]=""
for var in ${!hg_backed[@]} ; do
        dbg_echo "hg_backed[$var] == ${hg_backed[$var]}"
done
dbg_echo ":: hg_backed[Eigen] == ${hg_backed[eigen]}"
dbg_echo "hg_backed[fast_Api] == ${hg_backed[fast_api]}"

# if [ "$(basename $0)" = "clone" ] ; then
        if ! setup_repo_table $SRC_REPO_URL ; then
                exit 1
        fi
        parse_cli $@

        [ -z "${TARGETS[*]}" ] && err_echo "Nothing to clone." >&2 && exit
        [ -n "$PARENT_DIR" ] && dbg_echo "Create <$PARENT_DIR>" && mkdir -p "$PARENT_DIR"
        [ -z "$PARENT_DIR" ] && dbg_echo "set PARENT_DIR to  './'" && PARENT_DIR="./"
        (
                dbg_echo "cd to $PARENT_DIR: <$(pwd)>"
                cd $PARENT_DIR || exit -2
                if ! clone "${TARGETS[@]}" ; then
                        cd .. && rm -rf $PARENT_DIR
                        RV="-1"
                fi
                exit $RV
        )
        exit
# fi

# klone_parse $@
trace
parse_cli $@
trace off

[ "$#" -eq 0 ] && help && exit 1
if ! setup_repo_table $SRC_REPO_URL ; then
        exit 1
fi

[ "$PRINT" = "YES" ] && dump_Repo2Host && exit 0

[ -z "${TARGETS[*]}" ] && echo _err "Nothing to clone." && exit

clone "${TARGETS[@]}"

$CONFIG_TWO_REPOS


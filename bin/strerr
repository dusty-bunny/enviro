#!/bin/bash

err_codes_to_text=(
ENULL
EPERM
ENOENT
ESRCH
EINTR
EIO
ENXIO
E2BIG
ENOEXEC
EBADF
ECHILD
EAGAIN
ENOMEM
EACCES
EFAULT
ENOTBLK
EBUSY
EEXIST
EXDEV
ENODEV
ENOTDIR
EISDIR
EINVAL
ENFILE
EMFILE
ENOTTY
ETXTBSY
EFBIG
ENOSPC
ESPIPE
EROFS
EMLINK
EPIPE
EDOM
ERANGE
EDEADLK
ENAMETOOLONG
ENOLCK
ENOSYS
ENOTEMPTY
ELOOP
ENULL
ENOMSG
EIDRM
ECHRNG
EL2NSYNC
EL3HLT
EL3RST
ELNRNG
EUNATCH
ENOCSI
EL2HLT
EBADE
EBADR
EXFULL
ENOANO
EBADRQC
EBADSLT
ENULL
EBFONT
ENOSTR
ENODATA
ETIME
ENOSR
ENONET
ENOPKG
EREMOTE
ENOLINK
EADV
ESRMNT
ECOMM
EPROTO
EMULTIHOP
EDOTDOT
EBADMSG
EOVERFLOW
ENOTUNIQ
EBADFD
EREMCHG
ELIBACC
ELIBBAD
ELIBSCN
ELIBMAX
ELIBEXEC
EILSEQ
ERESTART
ESTRPIPE
EUSERS
ENOTSOCK
EDESTADDRREQ
EMSGSIZE
EPROTOTYPE
ENOPROTOOPT
EPROTONOSUPPORT
ESOCKTNOSUPPORT
EOPNOTSUPP
EPFNOSUPPORT
EAFNOSUPPORT
EADDRINUSE
EADDRNOTAVAIL
ENETDOWN
ENETUNREACH
ENETRESET
ECONNABORTED
ECONNRESET
ENOBUFS
EISCONN
ENOTCONN
ESHUTDOWN
ETOOMANYREFS
ETIMEDOUT
ECONNREFUSED
EHOSTDOWN
EHOSTUNREACH
EALREADY
EINPROGRESS
ESTALE
EUCLEAN
ENOTNAM
ENAVAIL
EISNAM
EREMOTEIO
EDQUOT
ENOMEDIUM
EMEDIUMTYPE
ECANCELED
)

declare -A errno

setup_error_codes()
{
        for i in $(seq 1 126) ; do
                name="${err_codes_to_text[$i]}"
                [ -z "$name" -o "$NAME" = "ENULL" ] && break
                errno["$name"]=$i
        done
}

print_error_codes()
{
	for key in "${!errno[@]}" ; do
echo "key: $key" >&2
	        echo -e -n "$key\t"
	        [ "${#errno[$key]}" -lt 7 ] && echo -e -n "\t:: "
	        echo "${errno[$key]}"
	done
}

print_name_to_code()
{
        local err="$1"

        [ -z "$err" ] && echo "No error specified." >&2 && return 1
        echo "${errno[$err]}"
}

print_code_to_name()
{
        local err="$1"

        [ -z "$err" ] && echo "No error specified." >&2 && return 1
        echo "${err_codes_to_text[$err]}"
}

list_err_map()
{
        for i in $(seq 1 126) ; do
                key=${err_codes_to_text[$i]}
                val=$i
                echo -e -n "  $key\t"
                [ "${#key}" -lt 6 ] && echo -n -e "\t"
                echo "$val"
        done
}

arg_to_cmd()
{
        local Arg=

        Arg="$1"
        if [ -z "$(echo $Arg | tr -d [:digit:])" ] ; then
                echo "print_code_to_name"
        else
                echo "print_name_to_code"
        fi
}

help_strerr()
{
        sed -n -e '/^### Begin/,/^### End/p' $0 | grep ')'
}
## === End of error functions ###

[ -z "$1" ] && help_$(basename ${0%.sh}) && exit 1
setup_error_codes

### Begin help
while [ $# -gt 0 ] ; do
        case $1 in
        -h) help_$(basename ${0%.sh}) && exit 0
        ;;
        -l) list_err_map && exit
        ;;
        #
        # In the case where multiple values are passed
        # in then the last value will be used.
        *) ARG="$1"
        ;;
        esac
        shift
done
### End help
if ! Func=$(arg_to_cmd $ARG) ; then
        echo -n "The value passed in to $(basename $0) must be ">&2
        echo "digits only or letters only." >&2
        exit 1
fi
$Func $ARG


#!/bin/bash

# DEBUG=1
# ROOT=~
ROOT=${ROOT:-}
HASH=sha256sum
HOOKS_DIR=${ROOT}/usr/share/git-core/templates/hooks
STYLES_DIR=${ROOT}/usr/share/zglue/styles
ZGLUE_LIBDIR=${ROOT}/usr/share/zglue/scripts
HOOKS="pre-commit commit-msg"
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
RESET='\033[0;39;49m'

declare -a BINS
declare -A DIFFER
#
# List of files required to provide style checking
# and pre-commit hook support to git repos.
#
set_bins()
{
    BINS=(
        ${ROOT}/usr/bin/style_file
        ${ROOT}/usr/bin/astyle
        ${ROOT}/usr/bin/hookup
        ${ROOT}${HOOKS_DIR}/pre-commit
        ${ROOT}${HOOKS_DIR}/commit-msg
        ${ROOT}${STYLES_DIR}/astyle-nuttx
        ${ROOT}${ZGLUE_LIBDIR}/lib_body.sh
 )
}

#
# See if the two files passed in are the same.
#
diff_check()
{
        local File_1=
        local File_2=
        local Sum_1=
        local Sum_2=

        File_1="$1" ; shift
        File_2="$1" ; shift

        [ -f "$File_1" ] && Sum_1="$(sha256sum $File_1 | awk '{print $1}')"
        [ -f "$File_2" ] && Sum_2="$(sha256sum $File_2 | awk '{print $1}')"

       [ "$Sum_1" = "$Sum_2" ] && return
       return 1
}


#
#
#
help()
{
        cat <<"EOF"
        This file will install style_file, astyle, pre-commit, commit-msg
        and astyle-nuttx to provide style checking for git commits.

        -p : Place all of these files in the proper locations. Must run as root!
        -u : Refresh .git/hooks with the latest pre-commit and commit-msg.
             Must be run from the root of the repo.


EOF
}

#
# List the steps to be done.
#
instructions()
{
        local COLOR=

        COLOR=$BLUE
        echo -e "\t${COLOR}As root or using sudo do the following will occur: ...\n"
        echo -ne "\tchmod +x "
        for bin in $BINS ; do
                echo -ne "$(basename $bin) "
        done
        echo ""
        for bin in $BINS ; do
                echo -e "\tcp $(basename $bin)\t\t$bin"
        done
        echo -e "${RESET}"
}

#
# Copy the global pre-commit and commit-msg hooks into place.
#
refresh_hooks()
{
        local FA=
        local CMD=
        local hook=
        local RepoRoot=
        FA=0

        RepoRoot=$(git rev-parse --show-toplevel)

  (
        cd $RepoRoot
        for hook in $HOOKS ; do
                [ ! -f $HOOKS_DIR/$hook ] && echo "Missing $HOOKS_DIR/$hook." >&2 && FA=1 && continue
                # See if the two files are the same and skip if they are.
                diff_check $HOOKS_DIR/$hook .git/hooks/$hook && continue
                echo "$hook is different, replacing." >&2
                CMD="cp $HOOKS_DIR/$hook .git/hooks/"
                $CMD && chmod +x .git/hooks/$hook
        done
  )

        echo "The hooks are verified as current."
        return $FA
}

#
#  Given a list of files or anything cycle through the list
#  printing each element in turn.  TODO: add ability to format
#  the page as in more than one column.
#
list_files()
{
        local Msg=
        local fff=
        declare -a Files=

        Msg="$1" ; shift
        Files=( "$@" )

        echo -e "${Msg}"
        for fff in "${Files[@]}" ; do
                echo -e "\t$fff"
        done
}

#
#  Given a bare variable (File versus $File), dereference
#  it and print out the name of the variable and its value.
#
list_vars()
{
        local Msg=
        local Vars=
        local vvv=

        Msg="$1" ; shift
        Vars=( "$@" )
        echo -e "${Msg}"
        for vvv in "${Vars[@]}" ; do
                echo -e "\t$vvv:\t\t${!vvv}"
        done
}

#
# validate the required files are available to place.
#
validate_horde()
{
        local FA=
        local bin=
        local local_bin=
        declare -a msgs=
        declare -a Found=
        declare -a NotFound=
        declare -a DIFFERS=

        FA=0
        msgs=( "${RED}Differs:${RESET}" "${BLUE}Found${RESET}" "${RED}NotFound:${RESET}" )

        echo "Making sure all of the files are here ... "
	for bin in "${BINS[@]}" ; do
                local_bin=$(basename $bin)
                if [ -f $local_bin ] ; then
                        if ! diff_check "$local_bin"  "$bin"  ; then
                                DIFFERS=( "$local_bin" "${DIFFERS[@]}" )
                                DIFFER["$local_bin"]="$bin"
                        fi
                        Found=( "$local_bin" "${Found[@]}" )
                        continue
                fi
                NotFound=( "$local_bin ${NotFound[@]}" )
                FA=1
	done
        [ -n "${Found[*]}" ] && list_files "${msgs[1]}" "${Found[@]}"
        [ -n "${DIFFERS[*]}" ] && list_files "${msgs[0]}" "${DIFFERS[@]}"
        [ -n "${NotFound[*]}" ] && list_files "${msgs[2]}" "${NotFound[@]}"

        return $FA
}

#
# Update the binaries if necessary.
#
place_files()
{
        local CMD=
        local bin=

        if [ $(id -u) -ne 0 ] && [ -z "$ROOT" ] ; then
                echo "Placing the files needs root privileges, please retry." >&2
                exit 1
        fi

        if ! validate_horde ; then
                echo "" >&2
                echo "Not all of the required files are available." >&2
                echo "Please place the files not found into this local directory." >&2
                return 1
        fi
        if [ "${#DIFFER[@]}" -eq 0 ] ; then
                echo "No files differ, nothing to copy." >&2
#               return
        fi
	for bin in "${BINS[@]}" ; do
	        this_bin="$(basename $bin)"
	        this_dir="$(dirname $bin)"
                if [ ! -f "${DIFFER["$this_bin"]}" ] ; then
                        continue
                fi
	        echo -n -e "Placing $this_bin:\\t\\t"
	        [ ! -d $this_dir ] && CMD="mkdir -p $this_dir"
	        [ -n "$CMD" ] && echo "$CMD" && $CMD && unset CMD
                # See if the two files are the same and skip if they are.
                CMD="cp $this_bin $bin"
	        [ -n "$CMD" ] && echo "$CMD" && $CMD && unset CMD
	        [ "$this_dir" == "${ROOT}${STYLES_DIR}" ] || chmod +x $bin
	        sleep 1
	done
}

if [ "$1" == "" ] ; then
        help
        exit 0
fi
while [ $# -ne 0 ] ; do
        case $1 in
        -h|--help) CMD="help && exit 0"
          ;;
        -i) CMD="instructions && exit 0"
          ;;
        -l) list_vars "Variables and their values" ROOT HOOKS HOOKS_DIR STYLES_DIR ZGLUE_LIBDIR
            exit 0
          ;;
        -P|--place) CMD=place_files $MKDIR
          ;;
        -p|--place) CMD=place_files
          ;;
        -r|--root) [ -d "$2" ] && ROOT=$2 && shift
          ;;
        -u|--update) CMD=refresh_hooks
          ;;
        -v|--validate) CMD=validate_horde
          ;;
        *) echo "That makes no sense: [$1]" >&2; exit 1
          ;;
        esac
        shift
done
set_bins
[ "$DEBUG" = "1" ] && list_vars "Environs" ZGLUE_LIBDIR HOOKS_DIR STYLES_DIR
[ "$DEBUG" = "1" ] && echo "$CMD"
[ "$DEBUG" != "1" ] && $CMD


From 0f64004775641ede80bb50dba85653743fec2723 Mon Sep 17 00:00:00 2001
From: Bill Rees <bill@zglue.com>
Date: Tue, 2 Jan 2018 21:59:57 -0800
Subject:     Intermediate mods.

Change-Id: Id6e0c1fd929b03043b9145516968e121e6b83fd8
---
 arch/arm/src/nrf52/chip/nrf52_rng.h                | 447 +++++++++++----------
 .../src/nrf52/components/drivers_nrf/hal/nrf_rng.h | 413 +++++++++----------
 arch/arm/src/nrf52/nrf.h                           |   2 +
 arch/arm/src/nrf52/nrf52_rng.c                     |  76 +---
 4 files changed, 434 insertions(+), 504 deletions(-)

diff --git a/arch/arm/src/nrf52/chip/nrf52_rng.h b/arch/arm/src/nrf52/chip/nrf52_rng.h
index b095cfcb0c..7fb8517d66 100644
--- a/arch/arm/src/nrf52/chip/nrf52_rng.h
+++ b/arch/arm/src/nrf52/chip/nrf52_rng.h
@@ -46,244 +46,245 @@
 #include "chip.h"
 
 #ifdef __cplusplus
-extern "C" {
+EXTERN "C"
+{
 #endif
 
-/* =============================================================================== *
- * ===================                  RNG                    =================== *
- * ===================        (Random Number Generator)        =================== *
- * =============================================================================== */
+  /* =============================================================================== *
+   * ===================                  RNG                    =================== *
+   * ===================        (Random Number Generator)        =================== *
+   * =============================================================================== */
 
-/************************************************************************************
- * Pre-processor Definitions
- ************************************************************************************/
+  /************************************************************************************
+   * Pre-processor Definitions
+   ************************************************************************************/
 #define NRF52_IRQ_RNG   RNG_IRQn
 #define NRF_RNG_TASK_SET    (1UL)
 #define NRF_RNG_EVENT_CLEAR (0UL)
 #define NRF_RNG             ((NRF_RNG_Type  *) NRF_RNG_BASE)
 
-/**
- * @enum nrf_rng_task_t
- * @brief RNG tasks.
- */
-typedef enum /*lint -save -e30 -esym(628,__INTADDR__) */
-{
-  NRF_RNG_TASK_START = offsetof(NRF_RNG_Type, TASKS_START), /**< Start the random number generator. */
-  NRF_RNG_TASK_STOP  = offsetof(NRF_RNG_Type, TASKS_STOP)   /**< Stop the random number generator. */
-} nrf_rng_task_t;                                             /*lint -restore */
-
-/**
- * @enum nrf_rng_event_t
- * @brief RNG events.
- */
-typedef enum
-{
-  NRF_RNG_EVENT_VALRDY = offsetof(NRF_RNG_Type, EVENTS_VALRDY) /**< New random number generated event. */
-} nrf_rng_event_t;
-
-/************************************************************************************
- * Public Type Definitions
- ************************************************************************************/
-
-/**
- * @enum nrf_rng_int_mask_t
- * @brief RNG interrupts.
- */
-typedef enum
-{
-  NRF_RNG_INT_VALRDY_MASK = RNG_INTENSET_VALRDY_Msk /**< Mask for enabling or disabling an interrupt on VALRDY event.  */
-} nrf_rng_int_mask_t;
-
-/**
- * @enum nrf_rng_short_mask_t
- * @brief Types of RNG shortcuts.
- */
-typedef enum
-{
-  NRF_RNG_SHORT_VALRDY_STOP_MASK = RNG_SHORTS_VALRDY_STOP_Msk /**<  Mask for setting shortcut between EVENT_VALRDY and TASK_STOP. */
-} nrf_rng_short_mask_t;
-
-
-
-/****************************************************************************
- * Private Function Prototypes
- ****************************************************************************/
-
-/**
- * @brief Function for enabling interrupts.
- *
- * @param[in]  rng_int_mask              Mask of interrupts.
- */
-__STATIC_INLINE void nrf_rng_int_enable(uint32_t rng_int_mask);
-
-/**
- * @brief Function for disabling interrupts.
- *
- * @param[in]  rng_int_mask              Mask of interrupts.
- */
-__STATIC_INLINE void nrf_rng_int_disable(uint32_t rng_int_mask);
-
-/**
- * @brief Function for getting the state of a specific interrupt.
- *
- * @param[in]  rng_int_mask              Interrupt.
- *
- * @retval     true                   If the interrupt is not enabled.
- * @retval     false                  If the interrupt is enabled.
- */
-__STATIC_INLINE bool nrf_rng_int_get(nrf_rng_int_mask_t rng_int_mask);
-
-/**
- * @brief Function for getting the address of a specific task.
- *
- * This function can be used by the PPI module.
- *
- * @param[in]  rng_task              Task.
- */
-__STATIC_INLINE uint32_t *nrf_rng_task_address_get(nrf_rng_task_t rng_task);
-
-/**
- * @brief Function for setting a specific task.
- *
- * @param[in]  rng_task              Task.
- */
-__STATIC_INLINE void nrf_rng_task_trigger(nrf_rng_task_t rng_task);
-
-/**
- * @brief Function for getting address of a specific event.
- *
- * This function can be used by the PPI module.
- *
- * @param[in]  rng_event              Event.
- */
-__STATIC_INLINE uint32_t *nrf_rng_event_address_get(nrf_rng_event_t rng_event);
-
-/**
- * @brief Function for clearing a specific event.
- *
- * @param[in]  rng_event              Event.
- */
-__STATIC_INLINE void nrf_rng_event_clear(nrf_rng_event_t rng_event);
-
-/**
- * @brief Function for getting the state of a specific event.
- *
- * @param[in]  rng_event              Event.
- *
- * @retval     true               If the event is not set.
- * @retval     false              If the event is set.
- */
-__STATIC_INLINE bool nrf_rng_event_get(nrf_rng_event_t rng_event);
-
-/**
- * @brief Function for setting shortcuts.
- *
- * @param[in]  rng_short_mask              Mask of shortcuts.
- *
- */
-__STATIC_INLINE void nrf_rng_shorts_enable(uint32_t rng_short_mask);
-
-/**
- * @brief Function for clearing shortcuts.
- *
- * @param[in]  rng_short_mask              Mask of shortcuts.
- *
- */
-__STATIC_INLINE void nrf_rng_shorts_disable(uint32_t rng_short_mask);
-
-/**
- * @brief Function for getting the previously generated random value.
- *
- * @return     Previously generated random value.
- */
-__STATIC_INLINE uint8_t nrf_rng_random_value_get(void);
-
-/**
- * @brief Function for enabling digital error correction.
- */
-__STATIC_INLINE void nrf_rng_error_correction_enable(void);
-
-/**
- * @brief Function for disabling digital error correction.
- */
-__STATIC_INLINE void nrf_rng_error_correction_disable(void);
-
-/**
- *@}
- **/
+  /**
+   * @enum nrf_rng_task_t
+   * @brief RNG tasks.
+   */
+  typedef enum /*lint -save -e30 -esym(628,__INTADDR__) */
+  {
+    NRF_RNG_TASK_START = offsetof(NRF_RNG_Type, TASKS_START), /**< Start the random number generator. */
+    NRF_RNG_TASK_STOP  = offsetof(NRF_RNG_Type, TASKS_STOP)   /**< Stop the random number generator. */
+  } nrf_rng_task_t;                                             /*lint -restore */
+
+  /**
+   * @enum nrf_rng_event_t
+   * @brief RNG events.
+   */
+  typedef enum
+  {
+    NRF_RNG_EVENT_VALRDY = offsetof(NRF_RNG_Type, EVENTS_VALRDY) /**< New random number generated event. */
+  } nrf_rng_event_t;
+
+  /************************************************************************************
+   * Public Type Definitions
+   ************************************************************************************/
+
+  /**
+   * @enum nrf_rng_int_mask_t
+   * @brief RNG interrupts.
+   */
+  typedef enum
+  {
+    NRF_RNG_INT_VALRDY_MASK = RNG_INTENSET_VALRDY_Msk /**< Mask for enabling or disabling an interrupt on VALRDY event.  */
+  } nrf_rng_int_mask_t;
+
+  /**
+   * @enum nrf_rng_short_mask_t
+   * @brief Types of RNG shortcuts.
+   */
+  typedef enum
+  {
+    NRF_RNG_SHORT_VALRDY_STOP_MASK = RNG_SHORTS_VALRDY_STOP_Msk /**<  Mask for setting shortcut between EVENT_VALRDY and TASK_STOP. */
+  } nrf_rng_short_mask_t;
+
+
+
+  /****************************************************************************
+   * Private Function Prototypes
+   ****************************************************************************/
+
+  /**
+   * @brief Function for enabling interrupts.
+   *
+   * @param[in]  rng_int_mask              Mask of interrupts.
+   */
+  __STATIC_INLINE void nrf_rng_int_enable(uint32_t rng_int_mask);
+
+  /**
+   * @brief Function for disabling interrupts.
+   *
+   * @param[in]  rng_int_mask              Mask of interrupts.
+   */
+  __STATIC_INLINE void nrf_rng_int_disable(uint32_t rng_int_mask);
+
+  /**
+   * @brief Function for getting the state of a specific interrupt.
+   *
+   * @param[in]  rng_int_mask              Interrupt.
+   *
+   * @retval     true                   If the interrupt is not enabled.
+   * @retval     false                  If the interrupt is enabled.
+   */
+  __STATIC_INLINE bool nrf_rng_int_get(nrf_rng_int_mask_t rng_int_mask);
+
+  /**
+   * @brief Function for getting the address of a specific task.
+   *
+   * This function can be used by the PPI module.
+   *
+   * @param[in]  rng_task              Task.
+   */
+  __STATIC_INLINE uint32_t *nrf_rng_task_address_get(nrf_rng_task_t rng_task);
+
+  /**
+   * @brief Function for setting a specific task.
+   *
+   * @param[in]  rng_task              Task.
+   */
+  __STATIC_INLINE void nrf_rng_task_trigger(nrf_rng_task_t rng_task);
+
+  /**
+   * @brief Function for getting address of a specific event.
+   *
+   * This function can be used by the PPI module.
+   *
+   * @param[in]  rng_event              Event.
+   */
+  __STATIC_INLINE uint32_t *nrf_rng_event_address_get(nrf_rng_event_t rng_event);
+
+  /**
+   * @brief Function for clearing a specific event.
+   *
+   * @param[in]  rng_event              Event.
+   */
+  __STATIC_INLINE void nrf_rng_event_clear(nrf_rng_event_t rng_event);
+
+  /**
+   * @brief Function for getting the state of a specific event.
+   *
+   * @param[in]  rng_event              Event.
+   *
+   * @retval     true               If the event is not set.
+   * @retval     false              If the event is set.
+   */
+  __STATIC_INLINE bool nrf_rng_event_get(nrf_rng_event_t rng_event);
+
+  /**
+   * @brief Function for setting shortcuts.
+   *
+   * @param[in]  rng_short_mask              Mask of shortcuts.
+   *
+   */
+  __STATIC_INLINE void nrf_rng_shorts_enable(uint32_t rng_short_mask);
+
+  /**
+   * @brief Function for clearing shortcuts.
+   *
+   * @param[in]  rng_short_mask              Mask of shortcuts.
+   *
+   */
+  __STATIC_INLINE void nrf_rng_shorts_disable(uint32_t rng_short_mask);
+
+  /**
+   * @brief Function for getting the previously generated random value.
+   *
+   * @return     Previously generated random value.
+   */
+  __STATIC_INLINE uint8_t nrf_rng_random_value_get(void);
+
+  /**
+   * @brief Function for enabling digital error correction.
+   */
+  __STATIC_INLINE void nrf_rng_error_correction_enable(void);
+
+  /**
+   * @brief Function for disabling digital error correction.
+   */
+  __STATIC_INLINE void nrf_rng_error_correction_disable(void);
+
+  /**
+   *@}
+   **/
 
 #ifndef SUPPRESS_INLINE_IMPLEMENTATION
 
-__STATIC_INLINE void nrf_rng_int_enable(uint32_t rng_int_mask)
-{
-  NRF_RNG->INTENSET = rng_int_mask;
-}
-
-__STATIC_INLINE void nrf_rng_int_disable(uint32_t rng_int_mask)
-{
-  NRF_RNG->INTENCLR = rng_int_mask;
-}
-
-__STATIC_INLINE bool nrf_rng_int_get(nrf_rng_int_mask_t rng_int_mask)
-{
-  return (bool)(NRF_RNG->INTENCLR & rng_int_mask);
-}
-
-__STATIC_INLINE uint32_t *nrf_rng_task_address_get(nrf_rng_task_t rng_task)
-{
-  return (uint32_t *)((uint8_t *)NRF_RNG + rng_task);
-}
-
-__STATIC_INLINE void nrf_rng_task_trigger(nrf_rng_task_t rng_task)
-{
-  *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
-}
-
-__STATIC_INLINE uint32_t *nrf_rng_event_address_get(nrf_rng_event_t rng_event)
-{
-  return (uint32_t *)((uint8_t *)NRF_RNG + rng_event);
-}
-
-__STATIC_INLINE void nrf_rng_event_clear(nrf_rng_event_t rng_event)
-{
-  *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
+  __STATIC_INLINE void nrf_rng_int_enable(uint32_t rng_int_mask)
+  {
+    NRF_RNG->INTENSET = rng_int_mask;
+  }
+
+  __STATIC_INLINE void nrf_rng_int_disable(uint32_t rng_int_mask)
+  {
+    NRF_RNG->INTENCLR = rng_int_mask;
+  }
+
+  __STATIC_INLINE bool nrf_rng_int_get(nrf_rng_int_mask_t rng_int_mask)
+  {
+    return (bool)(NRF_RNG->INTENCLR & rng_int_mask);
+  }
+
+  __STATIC_INLINE uint32_t *nrf_rng_task_address_get(nrf_rng_task_t rng_task)
+  {
+    return (uint32_t *)((uint8_t *)NRF_RNG + rng_task);
+  }
+
+  __STATIC_INLINE void nrf_rng_task_trigger(nrf_rng_task_t rng_task)
+  {
+    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
+  }
+
+  __STATIC_INLINE uint32_t *nrf_rng_event_address_get(nrf_rng_event_t rng_event)
+  {
+    return (uint32_t *)((uint8_t *)NRF_RNG + rng_event);
+  }
+
+  __STATIC_INLINE void nrf_rng_event_clear(nrf_rng_event_t rng_event)
+  {
+    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
 #if __CORTEX_M == 0x04
-  volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
-  (void)dummy;
+    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
+    (void)dummy;
 #else
 #error Just checking to see if this is working.
 #endif
-}
-
-__STATIC_INLINE bool nrf_rng_event_get(nrf_rng_event_t rng_event)
-{
-  return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
-}
-
-__STATIC_INLINE void nrf_rng_shorts_enable(uint32_t rng_short_mask)
-{
-  NRF_RNG->SHORTS |= rng_short_mask;
-}
-
-__STATIC_INLINE void nrf_rng_shorts_disable(uint32_t rng_short_mask)
-{
-  NRF_RNG->SHORTS &= ~rng_short_mask;
-}
-
-__STATIC_INLINE uint8_t nrf_rng_random_value_get(void)
-{
-  return (uint8_t)(NRF_RNG->VALUE & RNG_VALUE_VALUE_Msk);
-}
-
-__STATIC_INLINE void nrf_rng_error_correction_enable(void)
-{
-  NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
-}
-
-__STATIC_INLINE void nrf_rng_error_correction_disable(void)
-{
-  NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
-}
+  }
+
+  __STATIC_INLINE bool nrf_rng_event_get(nrf_rng_event_t rng_event)
+  {
+    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
+  }
+
+  __STATIC_INLINE void nrf_rng_shorts_enable(uint32_t rng_short_mask)
+  {
+    NRF_RNG->SHORTS |= rng_short_mask;
+  }
+
+  __STATIC_INLINE void nrf_rng_shorts_disable(uint32_t rng_short_mask)
+  {
+    NRF_RNG->SHORTS &= ~rng_short_mask;
+  }
+
+  __STATIC_INLINE uint8_t nrf_rng_random_value_get(void)
+  {
+    return (uint8_t)(NRF_RNG->VALUE & RNG_VALUE_VALUE_Msk);
+  }
+
+  __STATIC_INLINE void nrf_rng_error_correction_enable(void)
+  {
+    NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
+  }
+
+  __STATIC_INLINE void nrf_rng_error_correction_disable(void)
+  {
+    NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
+  }
 
 #endif
 
diff --git a/arch/arm/src/nrf52/components/drivers_nrf/hal/nrf_rng.h b/arch/arm/src/nrf52/components/drivers_nrf/hal/nrf_rng.h
index b5a5871dc1..6ebad8ab06 100644
--- a/arch/arm/src/nrf52/components/drivers_nrf/hal/nrf_rng.h
+++ b/arch/arm/src/nrf52/components/drivers_nrf/hal/nrf_rng.h
@@ -30,221 +30,222 @@
 #include "nrf.h"
 
 #ifdef __cplusplus
-extern "C" {
+EXTERN "C"
+{
 #endif
 
 #define NRF_RNG_TASK_SET    (1UL)
 #define NRF_RNG_EVENT_CLEAR (0UL)
-/**
- * @enum nrf_rng_task_t
- * @brief RNG tasks.
- */
-typedef enum /*lint -save -e30 -esym(628,__INTADDR__) */
-{
-  NRF_RNG_TASK_START = offsetof(NRF_RNG_Type, TASKS_START), /**< Start the random number generator. */
-  NRF_RNG_TASK_STOP  = offsetof(NRF_RNG_Type, TASKS_STOP)   /**< Stop the random number generator. */
-} nrf_rng_task_t;                                             /*lint -restore */
-
-/**
- * @enum nrf_rng_event_t
- * @brief RNG events.
- */
-typedef enum /*lint -save -e30 -esym(628,__INTADDR__) */
-{
-  NRF_RNG_EVENT_VALRDY = offsetof(NRF_RNG_Type, EVENTS_VALRDY) /**< New random number generated event. */
-} nrf_rng_event_t;                                               /*lint -restore */
-
-/**
- * @enum nrf_rng_int_mask_t
- * @brief RNG interrupts.
- */
-typedef enum
-{
-  NRF_RNG_INT_VALRDY_MASK = RNG_INTENSET_VALRDY_Msk /**< Mask for enabling or disabling an interrupt on VALRDY event.  */
-} nrf_rng_int_mask_t;
-
-/**
- * @enum nrf_rng_short_mask_t
- * @brief Types of RNG shortcuts.
- */
-typedef enum
-{
-  NRF_RNG_SHORT_VALRDY_STOP_MASK = RNG_SHORTS_VALRDY_STOP_Msk /**<  Mask for setting shortcut between EVENT_VALRDY and TASK_STOP. */
-} nrf_rng_short_mask_t;
-
-/**
- * @brief Function for enabling interrupts.
- *
- * @param[in]  rng_int_mask              Mask of interrupts.
- */
-__STATIC_INLINE void nrf_rng_int_enable(uint32_t rng_int_mask);
-
-/**
- * @brief Function for disabling interrupts.
- *
- * @param[in]  rng_int_mask              Mask of interrupts.
- */
-__STATIC_INLINE void nrf_rng_int_disable(uint32_t rng_int_mask);
-
-/**
- * @brief Function for getting the state of a specific interrupt.
- *
- * @param[in]  rng_int_mask              Interrupt.
- *
- * @retval     true                   If the interrupt is not enabled.
- * @retval     false                  If the interrupt is enabled.
- */
-__STATIC_INLINE bool nrf_rng_int_get(nrf_rng_int_mask_t rng_int_mask);
-
-/**
- * @brief Function for getting the address of a specific task.
- *
- * This function can be used by the PPI module.
- *
- * @param[in]  rng_task              Task.
- */
-__STATIC_INLINE uint32_t *nrf_rng_task_address_get(nrf_rng_task_t rng_task);
-
-/**
- * @brief Function for setting a specific task.
- *
- * @param[in]  rng_task              Task.
- */
-__STATIC_INLINE void nrf_rng_task_trigger(nrf_rng_task_t rng_task);
-
-/**
- * @brief Function for getting address of a specific event.
- *
- * This function can be used by the PPI module.
- *
- * @param[in]  rng_event              Event.
- */
-__STATIC_INLINE uint32_t *nrf_rng_event_address_get(nrf_rng_event_t rng_event);
-
-/**
- * @brief Function for clearing a specific event.
- *
- * @param[in]  rng_event              Event.
- */
-__STATIC_INLINE void nrf_rng_event_clear(nrf_rng_event_t rng_event);
-
-/**
- * @brief Function for getting the state of a specific event.
- *
- * @param[in]  rng_event              Event.
- *
- * @retval     true               If the event is not set.
- * @retval     false              If the event is set.
- */
-__STATIC_INLINE bool nrf_rng_event_get(nrf_rng_event_t rng_event);
-
-/**
- * @brief Function for setting shortcuts.
- *
- * @param[in]  rng_short_mask              Mask of shortcuts.
- *
- */
-__STATIC_INLINE void nrf_rng_shorts_enable(uint32_t rng_short_mask);
-
-/**
- * @brief Function for clearing shortcuts.
- *
- * @param[in]  rng_short_mask              Mask of shortcuts.
- *
- */
-__STATIC_INLINE void nrf_rng_shorts_disable(uint32_t rng_short_mask);
-
-/**
- * @brief Function for getting the previously generated random value.
- *
- * @return     Previously generated random value.
- */
-__STATIC_INLINE uint8_t nrf_rng_random_value_get(void);
-
-/**
- * @brief Function for enabling digital error correction.
- */
-__STATIC_INLINE void nrf_rng_error_correction_enable(void);
-
-/**
- * @brief Function for disabling digital error correction.
- */
-__STATIC_INLINE void nrf_rng_error_correction_disable(void);
-
-/**
- *@}
- **/
+  /**
+   * @enum nrf_rng_task_t
+   * @brief RNG tasks.
+   */
+  typedef enum /*lint -save -e30 -esym(628,__INTADDR__) */
+  {
+    NRF_RNG_TASK_START = offsetof(NRF_RNG_Type, TASKS_START), /**< Start the random number generator. */
+    NRF_RNG_TASK_STOP  = offsetof(NRF_RNG_Type, TASKS_STOP)   /**< Stop the random number generator. */
+  } nrf_rng_task_t;                                             /*lint -restore */
+
+  /**
+   * @enum nrf_rng_event_t
+   * @brief RNG events.
+   */
+  typedef enum /*lint -save -e30 -esym(628,__INTADDR__) */
+  {
+    NRF_RNG_EVENT_VALRDY = offsetof(NRF_RNG_Type, EVENTS_VALRDY) /**< New random number generated event. */
+  } nrf_rng_event_t;                                               /*lint -restore */
+
+  /**
+   * @enum nrf_rng_int_mask_t
+   * @brief RNG interrupts.
+   */
+  typedef enum
+  {
+    NRF_RNG_INT_VALRDY_MASK = RNG_INTENSET_VALRDY_Msk /**< Mask for enabling or disabling an interrupt on VALRDY event.  */
+  } nrf_rng_int_mask_t;
+
+  /**
+   * @enum nrf_rng_short_mask_t
+   * @brief Types of RNG shortcuts.
+   */
+  typedef enum
+  {
+    NRF_RNG_SHORT_VALRDY_STOP_MASK = RNG_SHORTS_VALRDY_STOP_Msk /**<  Mask for setting shortcut between EVENT_VALRDY and TASK_STOP. */
+  } nrf_rng_short_mask_t;
+
+  /**
+   * @brief Function for enabling interrupts.
+   *
+   * @param[in]  rng_int_mask              Mask of interrupts.
+   */
+  __STATIC_INLINE void nrf_rng_int_enable(uint32_t rng_int_mask);
+
+  /**
+   * @brief Function for disabling interrupts.
+   *
+   * @param[in]  rng_int_mask              Mask of interrupts.
+   */
+  __STATIC_INLINE void nrf_rng_int_disable(uint32_t rng_int_mask);
+
+  /**
+   * @brief Function for getting the state of a specific interrupt.
+   *
+   * @param[in]  rng_int_mask              Interrupt.
+   *
+   * @retval     true                   If the interrupt is not enabled.
+   * @retval     false                  If the interrupt is enabled.
+   */
+  __STATIC_INLINE bool nrf_rng_int_get(nrf_rng_int_mask_t rng_int_mask);
+
+  /**
+   * @brief Function for getting the address of a specific task.
+   *
+   * This function can be used by the PPI module.
+   *
+   * @param[in]  rng_task              Task.
+   */
+  __STATIC_INLINE uint32_t *nrf_rng_task_address_get(nrf_rng_task_t rng_task);
+
+  /**
+   * @brief Function for setting a specific task.
+   *
+   * @param[in]  rng_task              Task.
+   */
+  __STATIC_INLINE void nrf_rng_task_trigger(nrf_rng_task_t rng_task);
+
+  /**
+   * @brief Function for getting address of a specific event.
+   *
+   * This function can be used by the PPI module.
+   *
+   * @param[in]  rng_event              Event.
+   */
+  __STATIC_INLINE uint32_t *nrf_rng_event_address_get(nrf_rng_event_t rng_event);
+
+  /**
+   * @brief Function for clearing a specific event.
+   *
+   * @param[in]  rng_event              Event.
+   */
+  __STATIC_INLINE void nrf_rng_event_clear(nrf_rng_event_t rng_event);
+
+  /**
+   * @brief Function for getting the state of a specific event.
+   *
+   * @param[in]  rng_event              Event.
+   *
+   * @retval     true               If the event is not set.
+   * @retval     false              If the event is set.
+   */
+  __STATIC_INLINE bool nrf_rng_event_get(nrf_rng_event_t rng_event);
+
+  /**
+   * @brief Function for setting shortcuts.
+   *
+   * @param[in]  rng_short_mask              Mask of shortcuts.
+   *
+   */
+  __STATIC_INLINE void nrf_rng_shorts_enable(uint32_t rng_short_mask);
+
+  /**
+   * @brief Function for clearing shortcuts.
+   *
+   * @param[in]  rng_short_mask              Mask of shortcuts.
+   *
+   */
+  __STATIC_INLINE void nrf_rng_shorts_disable(uint32_t rng_short_mask);
+
+  /**
+   * @brief Function for getting the previously generated random value.
+   *
+   * @return     Previously generated random value.
+   */
+  __STATIC_INLINE uint8_t nrf_rng_random_value_get(void);
+
+  /**
+   * @brief Function for enabling digital error correction.
+   */
+  __STATIC_INLINE void nrf_rng_error_correction_enable(void);
+
+  /**
+   * @brief Function for disabling digital error correction.
+   */
+  __STATIC_INLINE void nrf_rng_error_correction_disable(void);
+
+  /**
+   *@}
+   **/
 
 #ifndef SUPPRESS_INLINE_IMPLEMENTATION
 
-__STATIC_INLINE void nrf_rng_int_enable(uint32_t rng_int_mask)
-{
-  NRF_RNG->INTENSET = rng_int_mask;
-}
-
-__STATIC_INLINE void nrf_rng_int_disable(uint32_t rng_int_mask)
-{
-  NRF_RNG->INTENCLR = rng_int_mask;
-}
-
-__STATIC_INLINE bool nrf_rng_int_get(nrf_rng_int_mask_t rng_int_mask)
-{
-  return (bool)(NRF_RNG->INTENCLR & rng_int_mask);
-}
-
-__STATIC_INLINE uint32_t *nrf_rng_task_address_get(nrf_rng_task_t rng_task)
-{
-  return (uint32_t *)((uint8_t *)NRF_RNG + rng_task);
-}
-
-__STATIC_INLINE void nrf_rng_task_trigger(nrf_rng_task_t rng_task)
-{
-  *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
-}
-
-__STATIC_INLINE uint32_t *nrf_rng_event_address_get(nrf_rng_event_t rng_event)
-{
-  return (uint32_t *)((uint8_t *)NRF_RNG + rng_event);
-}
-
-__STATIC_INLINE void nrf_rng_event_clear(nrf_rng_event_t rng_event)
-{
-  *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
+  __STATIC_INLINE void nrf_rng_int_enable(uint32_t rng_int_mask)
+  {
+    NRF_RNG->INTENSET = rng_int_mask;
+  }
+
+  __STATIC_INLINE void nrf_rng_int_disable(uint32_t rng_int_mask)
+  {
+    NRF_RNG->INTENCLR = rng_int_mask;
+  }
+
+  __STATIC_INLINE bool nrf_rng_int_get(nrf_rng_int_mask_t rng_int_mask)
+  {
+    return (bool)(NRF_RNG->INTENCLR & rng_int_mask);
+  }
+
+  __STATIC_INLINE uint32_t *nrf_rng_task_address_get(nrf_rng_task_t rng_task)
+  {
+    return (uint32_t *)((uint8_t *)NRF_RNG + rng_task);
+  }
+
+  __STATIC_INLINE void nrf_rng_task_trigger(nrf_rng_task_t rng_task)
+  {
+    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_task)) = NRF_RNG_TASK_SET;
+  }
+
+  __STATIC_INLINE uint32_t *nrf_rng_event_address_get(nrf_rng_event_t rng_event)
+  {
+    return (uint32_t *)((uint8_t *)NRF_RNG + rng_event);
+  }
+
+  __STATIC_INLINE void nrf_rng_event_clear(nrf_rng_event_t rng_event)
+  {
+    *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event)) = NRF_RNG_EVENT_CLEAR;
 #if __CORTEX_M == 0x04
-  volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
-  (void)dummy;
+    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
+    (void)dummy;
 #endif
-}
-
-__STATIC_INLINE bool nrf_rng_event_get(nrf_rng_event_t rng_event)
-{
-  return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
-}
-
-__STATIC_INLINE void nrf_rng_shorts_enable(uint32_t rng_short_mask)
-{
-  NRF_RNG->SHORTS |= rng_short_mask;
-}
-
-__STATIC_INLINE void nrf_rng_shorts_disable(uint32_t rng_short_mask)
-{
-  NRF_RNG->SHORTS &= ~rng_short_mask;
-}
-
-__STATIC_INLINE uint8_t nrf_rng_random_value_get(void)
-{
-  return (uint8_t)(NRF_RNG->VALUE & RNG_VALUE_VALUE_Msk);
-}
-
-__STATIC_INLINE void nrf_rng_error_correction_enable(void)
-{
-  NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
-}
-
-__STATIC_INLINE void nrf_rng_error_correction_disable(void)
-{
-  NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
-}
+  }
+
+  __STATIC_INLINE bool nrf_rng_event_get(nrf_rng_event_t rng_event)
+  {
+    return (bool) * ((volatile uint32_t *)((uint8_t *)NRF_RNG + rng_event));
+  }
+
+  __STATIC_INLINE void nrf_rng_shorts_enable(uint32_t rng_short_mask)
+  {
+    NRF_RNG->SHORTS |= rng_short_mask;
+  }
+
+  __STATIC_INLINE void nrf_rng_shorts_disable(uint32_t rng_short_mask)
+  {
+    NRF_RNG->SHORTS &= ~rng_short_mask;
+  }
+
+  __STATIC_INLINE uint8_t nrf_rng_random_value_get(void)
+  {
+    return (uint8_t)(NRF_RNG->VALUE & RNG_VALUE_VALUE_Msk);
+  }
+
+  __STATIC_INLINE void nrf_rng_error_correction_enable(void)
+  {
+    NRF_RNG->CONFIG |= RNG_CONFIG_DERCEN_Msk;
+  }
+
+  __STATIC_INLINE void nrf_rng_error_correction_disable(void)
+  {
+    NRF_RNG->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
+  }
 
 #endif
 
diff --git a/arch/arm/src/nrf52/nrf.h b/arch/arm/src/nrf52/nrf.h
index ca264b3e7a..dbbaa94f1a 100644
--- a/arch/arm/src/nrf52/nrf.h
+++ b/arch/arm/src/nrf52/nrf.h
@@ -51,11 +51,13 @@
 #include "nrf52840_bitfields.h"
 #include "nrf51_to_nrf52840.h"
 #include "nrf52_to_nrf52840.h"
+#define   EXTERN extern
 #elif defined (NRF52832_XXAA)
 #include "nrf52.h"
 #include "nrf52_bitfields.h"
 #include "nrf51_to_nrf52.h"
 #include "nrf52_name_change.h"
+#define   EXTERN extern
 #else
 #error "Device must be defined. See nrf.h."
 #endif /* NRF51, NRF52832_XXAA, NRF52840_XXAA */
diff --git a/arch/arm/src/nrf52/nrf52_rng.c b/arch/arm/src/nrf52/nrf52_rng.c
index 761b09f7b6..5a93b72305 100644
--- a/arch/arm/src/nrf52/nrf52_rng.c
+++ b/arch/arm/src/nrf52/nrf52_rng.c
@@ -339,8 +339,6 @@ static void nrf52_rng_disable()
 
 static int nrf52_rng_interrupt(int irq, FAR void *context, FAR void *arg)
 {
-  uint32_t rngsr;
-  uint32_t data;
 
   NRF_DRV_RNG_LOCK();
   if (
@@ -361,38 +359,6 @@ static int nrf52_rng_interrupt(int irq, FAR void *context, FAR void *arg)
       NRF_LOG_DEBUG("Event: NRF_RNG_EVENT_VALRDY.");
     }
   NRF_DRV_RNG_RELEASE();
-  rngsr = getreg32(NRF52_RNG_SR);
-  if (rngsr & RNG_SR_CEIS) /* Check for clock error int stat */
-    {
-      /* Clear it, we will try again. */
-
-      putreg32(rngsr & ~RNG_SR_CEIS, NRF52_RNG_SR);
-      return OK;
-    }
-
-  if (rngsr & RNG_SR_SEIS) /* Check for seed error in int stat */
-    {
-      uint32_t crval;
-
-      /* Clear seed error, then disable/enable the rng and try again. */
-
-      putreg32(rngsr & ~RNG_SR_SEIS, NRF52_RNG_SR);
-      crval = getreg32(NRF52_RNG_CR);
-      crval &= ~RNG_CR_RNGEN;
-      putreg32(crval, NRF52_RNG_CR);
-      crval |= RNG_CR_RNGEN;
-      putreg32(crval, NRF52_RNG_CR);
-      return OK;
-    }
-
-  if (!(rngsr & RNG_SR_DRDY)) /* Data ready must be set */
-    {
-      /* This random value is not valid, we will try again. */
-
-      return OK;
-    }
-
-  data = getreg32(NRF52_RNG_DR);
 
   /* As required by the FIPS PUB (Federal Information Processing Standard
    * Publication) 140-2, the first random number generated after setting the
@@ -402,46 +368,6 @@ static int nrf52_rng_interrupt(int irq, FAR void *context, FAR void *arg)
    * compared numbers are equal (continuous random number generator test).
    */
 
-  if (g_rngdev.rd_first)
-    {
-      g_rngdev.rd_first = false;
-      g_rngdev.rd_lastval = data;
-      return OK;
-    }
-
-  if (g_rngdev.rd_lastval == data)
-    {
-      /* Two subsequent same numbers, we will try again. */
-
-      return OK;
-    }
-
-  /* If we get here, the random number is valid. */
-
-  g_rngdev.rd_lastval = data;
-
-  if (g_rngdev.rd_buflen >= 4)
-    {
-      g_rngdev.rd_buflen -= 4;
-      *(uint32_t *)&g_rngdev.rd_buf[g_rngdev.rd_buflen] = data;
-    }
-  else
-    {
-      while (g_rngdev.rd_buflen > 0)
-        {
-          g_rngdev.rd_buf[--g_rngdev.rd_buflen] = (char)data;
-          data >>= 8;
-        }
-    }
-
-  if (g_rngdev.rd_buflen == 0)
-    {
-      /* Buffer filled, stop further interrupts. */
-
-      nrf52_rng_disable();
-      sem_post(&g_rngdev.rd_readsem);
-    }
-
   return OK;
 }
 
@@ -468,7 +394,7 @@ static int nrf52_rng_close(FAR struct file *filep)
  * Name: nrf52_rng_ioctl
  ****************************************************************************/
 
-static int nrf52_rng_ioctl(FAR struct file *filep, )
+static int nrf52_rng_ioctl(FAR struct file *filep, int cmd, unsigned long arg)
 {
   return 0;
 }
-- 
2.11.0

